From 132689952768@xxx Sat Dec 13 20:08:18 +0000 2014
X-GM-THRID: 132292542464
X-Google-Groups: openmundi
X-Google-Thread: 73f92da6eb,88088887a6cdb9c3,start
X-Google-Attributes: gid73f92da6eb,domainid0,public,googlegroup
X-Google-NewGroupId: yes
X-Received: by 10.180.36.38 with SMTP id n6mr2209261wij.0.1408218079773;
        Sat, 16 Aug 2014 12:41:19 -0700 (PDT)
X-BeenThere: openmundi@googlegroups.com
Received: by 10.152.42.209 with SMTP id q17ls323048lal.105.gmail; Sat, 16 Aug
 2014 12:41:19 -0700 (PDT)
X-Received: by 10.152.9.169 with SMTP id a9mr2183463lab.1.1408218079343;
        Sat, 16 Aug 2014 12:41:19 -0700 (PDT)
Return-Path: <eckhard.licher@googlemail.com>
Received: from mail-wi0-x229.google.com (mail-wi0-x229.google.com [2a00:1450:400c:c05::229])
        by gmr-mx.google.com with ESMTPS id hk1si21690wib.2.2014.08.16.12.41.19
        for <openmundi@googlegroups.com>
        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
        Sat, 16 Aug 2014 12:41:19 -0700 (PDT)
Received-SPF: pass (google.com: domain of eckhard.licher@googlemail.com designates 2a00:1450:400c:c05::229 as permitted sender) client-ip=2a00:1450:400c:c05::229;
Authentication-Results: gmr-mx.google.com;
       spf=pass (google.com: domain of eckhard.licher@googlemail.com designates 2a00:1450:400c:c05::229 as permitted sender) smtp.mail=eckhard.licher@googlemail.com;
       dkim=pass header.i=@googlemail.com
Received: by mail-wi0-f169.google.com with SMTP id n3so2164988wiv.0
        for <openmundi@googlegroups.com>; Sat, 16 Aug 2014 12:41:19 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlemail.com; s=20120113;
        h=message-id:date:from:user-agent:mime-version:to:subject
         :content-type;
        bh=zYRnc1X0/+uJbb5WUOVFdTmeQKfrcHo61LdjigoJA2U=;
        b=XgtGxiENNUjvKeFm14VBNMtkhedm9F9gFb7BN0+clHPhIGygn0FWcA/SNNJuAAVr1E
         sAeMjl60+Vz6+AWNpvOtRYdIG4zkKPfWPvj5otUBL/GH0rfogy3hrwFCSRxfUfzrflXZ
         UPHq+jcdwJKZo/HxAJdw30Gbd6W4dHSLje3jAza5m2YEAYOzboxQ3W8jg6eb+2NtSWp6
         iPu0rjZXSgwGpAI2gVHWSCXS0fJp7mHSgHqAXbiAPP7Z54lQD81wj/bnMLH/hdRwaHuC
         zy5J+VFzyiFwRTDDYg6LtkPXO1OfNam6wW5vUr74Jxsi8k2Q7hbnqeLqh2kkXjFRjQl2
         tfHA==
X-Received: by 10.180.39.73 with SMTP id n9mr29789852wik.70.1408218079132;
        Sat, 16 Aug 2014 12:41:19 -0700 (PDT)
Return-Path: <eckhard.licher@googlemail.com>
Received: from [192.168.2.44] (frnk-4d017d5d.pool.mediaWays.net. [77.1.125.93])
        by mx.google.com with ESMTPSA id gl4sm19710546wib.19.2014.08.16.12.41.16
        for <openmundi@googlegroups.com>
        (version=TLSv1.2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);
        Sat, 16 Aug 2014 12:41:17 -0700 (PDT)
Message-ID: <53EFB3DA.4070800@googlemail.com>
Date: Sat, 16 Aug 2014 21:41:14 +0200
From: Eckhard <eckhard.licher@googlemail.com>
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:31.0) Gecko/20100101 Thunderbird/31.0
MIME-Version: 1.0
To: openmundi@googlegroups.com
Subject: Word Factbook -- Field names an descriptions
Content-Type: multipart/mixed;
 boundary="------------010006000308010602000001"

This is a multi-part message in MIME format.
--------------010006000308010602000001
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: 7bit

Gerald,

I have created two quick and dirty scripts to extract the field names 
and descriptions from the download version of the factbook.

The scripts and the results are included in the attachment (download 
version of the factbook as of today).

The scripts should be called
$ python scrape-fieldlist.py 
/path/to/local/copy/of/the/factbook/fields/print_*.html > field_list.txt
and
$ python scrape-field_descriptions.py 
/path/to/local/copy/of/the/factbook/fields/print_*.html> 
field_descriptions.txt
respectively.

If need be the scripts can easily be updated to accept fieldkey(s) and 
to download and analyze the up-to-date version from the CIA server.

Cheers

Eckhard






--------------010006000308010602000001
Content-Type: text/plain; charset=UTF-8;
 name="field_descriptions.txt"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="field_descriptions.txt"

MjAwMQlUaGlzIGVudHJ5IGdpdmVzIHRoZSBncm9zcyBkb21lc3RpYyBwcm9kdWN0IChHRFAp
IG9yIHZhbHVlIG9mIGFsbCBmaW5hbCBnb29kcyBhbmQgc2VydmljZXMgcHJvZHVjZWQgd2l0
aGluIGEgbmF0aW9uIGluIGEgZ2l2ZW4geWVhci4gQSBuYXRpb24ncyBHRFAgYXQgcHVyY2hh
c2luZyBwb3dlciBwYXJpdHkgKFBQUCkgZXhjaGFuZ2UgcmF0ZXMgaXMgdGhlIHN1bSB2YWx1
ZSBvZiBhbGwgZ29vZHMgYW5kIHNlcnZpY2VzIHByb2R1Y2VkIGluIHRoZSBjb3VudHJ5IHZh
bHVlZCBhdCBwcmljZXMgcHJldmFpbGluZyBpbiB0aGUgVW5pdGVkIFN0YXRlcyBpbiB0aGUg
eWVhciBub3RlZC4gVGhpcyBpcyB0aGUgbWVhc3VyZSBtb3N0IGVjb25vbWlzdHMgcHJlZmVy
IHdoZW4gbG9va2luZyBhdCBwZXItY2FwaXRhIHdlbGZhcmUgYW5kIHdoZW4gY29tcGFyaW5n
IGxpdmluZyBjb25kaXRpb25zIG9yIHVzZSBvZiByZXNvdXJjZXMgYWNyb3NzIGNvdW50cmll
cy4gVGhlIG1lYXN1cmUgaXMgZGlmZmljdWx0IHRvIGNvbXB1dGUsIGFzIGEgVVMgZG9sbGFy
IHZhbHVlIGhhcyB0byBiZSBhc3NpZ25lZCB0byBhbGwgZ29vZHMgYW5kIHNlcnZpY2VzIGlu
IHRoZSBjb3VudHJ5IHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGVzZSBnb29kcyBhbmQgc2Vy
dmljZXMgaGF2ZSBhIGRpcmVjdCBlcXVpdmFsZW50IGluIHRoZSBVbml0ZWQgU3RhdGVzIChm
b3IgZXhhbXBsZSwgdGhlIHZhbHVlIG9mIGFuIG94LWNhcnQgb3Igbm9uLVVTIG1pbGl0YXJ5
IGVxdWlwbWVudCk7IGFzIGEgcmVzdWx0LCBQUFAgZXN0aW1hdGVzIGZvciBzb21lIGNvdW50
cmllcyBhcmUgYmFzZWQgb24gYSBzbWFsbCBhbmQgc29tZXRpbWVzIGRpZmZlcmVudCBzZXQg
b2YgZ29vZHMgYW5kIHNlcnZpY2VzLiBJbiBhZGRpdGlvbiwgbWFueSBjb3VudHJpZXMgZG8g
bm90IGZvcm1hbGx5IHBhcnRpY2lwYXRlIGluIHRoZSBXb3JsZCBCYW5rJ3MgUFBQIHByb2pl
Y3QgdGhhdCBjYWxjdWxhdGVzIHRoZXNlIG1lYXN1cmVzLCBzbyB0aGUgcmVzdWx0aW5nIEdE
UCBlc3RpbWF0ZXMgZm9yIHRoZXNlIGNvdW50cmllcyBtYXkgbGFjayBwcmVjaXNpb24uIEZv
ciBtYW55IGRldmVsb3BpbmcgY291bnRyaWVzLCBQUFAtYmFzZWQgR0RQIG1lYXN1cmVzIGFy
ZSBtdWx0aXBsZXMgb2YgdGhlIG9mZmljaWFsIGV4Y2hhbmdlIHJhdGUgKE9FUikgbWVhc3Vy
ZS4gVGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gdGhlIE9FUi0gYW5kIFBQUC1kZW5vbWluYXRl
ZCBHRFAgdmFsdWVzIGZvciBtb3N0IG9mIHRoZSB3ZWFsdGh5IGluZHVzdHJpYWxpemVkIGNv
dW50cmllcyBhcmUgZ2VuZXJhbGx5IG11Y2ggc21hbGxlci4KMjAwMglUaGUgYXZlcmFnZSBh
bm51YWwgcGVyY2VudCBjaGFuZ2UgaW4gdGhlIHBvcHVsYXRpb24sIHJlc3VsdGluZyBmcm9t
IGEgc3VycGx1cyAob3IgZGVmaWNpdCkgb2YgYmlydGhzIG92ZXIgZGVhdGhzIGFuZCB0aGUg
YmFsYW5jZSBvZiBtaWdyYW50cyBlbnRlcmluZyBhbmQgbGVhdmluZyBhIGNvdW50cnkuIFRo
ZSByYXRlIG1heSBiZSBwb3NpdGl2ZSBvciBuZWdhdGl2ZS4gVGhlIGdyb3d0aCByYXRlIGlz
IGEgZmFjdG9yIGluIGRldGVybWluaW5nIGhvdyBncmVhdCBhIGJ1cmRlbiB3b3VsZCBiZSBp
bXBvc2VkIG9uIGEgY291bnRyeSBieSB0aGUgY2hhbmdpbmcgbmVlZHMgb2YgaXRzIHBlb3Bs
ZSBmb3IgaW5mcmFzdHJ1Y3R1cmUgKGUuZy4sIHNjaG9vbHMsIGhvc3BpdGFscywgaG91c2lu
Zywgcm9hZHMpLCByZXNvdXJjZXMgKGUuZy4sIGZvb2QsIHdhdGVyLCBlbGVjdHJpY2l0eSks
IGFuZCBqb2JzLiBSYXBpZCBwb3B1bGF0aW9uIGdyb3d0aCBjYW4gYmUgc2VlbiBhcyB0aHJl
YXRlbmluZyBieSBuZWlnaGJvcmluZyBjb3VudHJpZXMuCjIwMDMJVGhpcyBlbnRyeSBnaXZl
cyBHRFAgZ3Jvd3RoIG9uIGFuIGFubnVhbCBiYXNpcyBhZGp1c3RlZCBmb3IgaW5mbGF0aW9u
IGFuZCBleHByZXNzZWQgYXMgYSBwZXJjZW50LiBUaGUgZ3Jvd3RoIHJhdGVzIGFyZSB5ZWFy
LW92ZXIteWVhciwgYW5kIG5vdCBjb21wb3VuZGVkLgoyMDA0CVRoaXMgZW50cnkgc2hvd3Mg
R0RQIG9uIGEgcHVyY2hhc2luZyBwb3dlciBwYXJpdHkgYmFzaXMgZGl2aWRlZCBieSBwb3B1
bGF0aW9uIGFzIG9mIDEgSnVseSBmb3IgdGhlIHNhbWUgeWVhci4KMjAwNQkKMjAwNglUaGlz
IGVudHJ5IGRlc2NyaWJlcyB0aGUgZm9ybWFsIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGEgcGFy
dGljdWxhciBub25pbmRlcGVuZGVudCBlbnRpdHkgYW5kIGFuIGluZGVwZW5kZW50IHN0YXRl
LgoyMDA3CVRoaXMgZW50cnkgaW5jbHVkZXMgdGhlIGNoaWVmIG9mIG1pc3Npb24gLCBlbWJh
c3N5IGFkZHJlc3MsIG1haWxpbmcgYWRkcmVzcyAsIHRlbGVwaG9uZSBudW1iZXIsIEZBWCBu
dW1iZXIsIGJyYW5jaCBvZmZpY2UgbG9jYXRpb25zLCBjb25zdWxhdGUgZ2VuZXJhbCBsb2Nh
dGlvbnMsIGFuZCBjb25zdWxhdGUgbG9jYXRpb25zLgoyMDA4CVRoaXMgZW50cnkgaW5jbHVk
ZXMgbWlzY2VsbGFuZW91cyB0cmFuc3BvcnRhdGlvbiBpbmZvcm1hdGlvbiBvZiBzaWduaWZp
Y2FuY2Ugbm90IGluY2x1ZGVkIGVsc2V3aGVyZS4KMjAxMAlUaGlzIGVudHJ5IHByb3ZpZGVz
IHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIHBvcHVsYXRpb24gYWNjb3JkaW5nIHRvIGFnZS4g
SW5mb3JtYXRpb24gaXMgaW5jbHVkZWQgYnkgc2V4IGFuZCBhZ2UgZ3JvdXAgYXMgZm9sbG93
czogMC0xNCB5ZWFycyAoY2hpbGRyZW4pICwgMTUtMjQgeWVhcnMgKGVhcmx5IHdvcmtpbmcg
YWdlKSAsIDI1LTU0IHllYXJzIChwcmltZSB3b3JraW5nIGFnZSkgLCA1NS02NCB5ZWFycyAo
bWF0dXJlIHdvcmtpbmcgYWdlKSAsIDY1IHllYXJzIGFuZCBvdmVyIChlbGRlcmx5KSAuIFRo
ZSBhZ2Ugc3RydWN0dXJlIG9mIGEgcG9wdWxhdGlvbiBhZmZlY3RzIGEgbmF0aW9uJ3Mga2V5
IHNvY2lvZWNvbm9taWMgaXNzdWVzLiBDb3VudHJpZXMgd2l0aCB5b3VuZyBwb3B1bGF0aW9u
cyAoaGlnaCBwZXJjZW50YWdlIHVuZGVyIGFnZSAxNSkgbmVlZCB0byBpbnZlc3QgbW9yZSBp
biBzY2hvb2xzLCB3aGlsZSBjb3VudHJpZXMgd2l0aCBvbGRlciBwb3B1bGF0aW9ucyAoaGln
aCBwZXJjZW50YWdlIGFnZXMgNjUgYW5kIG92ZXIpIG5lZWQgdG8gaW52ZXN0IG1vcmUgaW4g
dGhlIGhlYWx0aCBzZWN0b3IuIFRoZSBhZ2Ugc3RydWN0dXJlIGNhbiBhbHNvIGJlIHVzZWQg
dG8gaGVscCBwcmVkaWN0IHBvdGVudGlhbCBwb2xpdGljYWwgaXNzdWVzLiBGb3IgZXhhbXBs
ZSwgdGhlIHJhcGlkIGdyb3d0aCBvZiBhIHlvdW5nIGFkdWx0IHBvcHVsYXRpb24gdW5hYmxl
IHRvIGZpbmQgZW1wbG95bWVudCBjYW4gbGVhZCB0byB1bnJlc3QuCjIwMTEJVGhpcyBlbnRy
eSBpbmNsdWRlcyByb3VuZGVkIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgZmlndXJlcyBmb3Ig
dGhlIGNlbnRyb2lkIG9yIGNlbnRlciBwb2ludCBvZiBhIGNvdW50cnkgZXhwcmVzc2VkIGlu
IGRlZ3JlZXMgYW5kIG1pbnV0ZXM7IGl0IGlzIGJhc2VkIG9uIHRoZSBsb2NhdGlvbnMgcHJv
dmlkZWQgaW4gdGhlIEdlb2dyYXBoaWMgTmFtZXMgU2VydmVyIChHTlMpLCBtYWludGFpbmVk
IGJ5IHRoZSBOYXRpb25hbCBHZW9zcGF0aWFsLUludGVsbGlnZW5jZSBBZ2VuY3kgb24gYmVo
YWxmIG9mIHRoZSBVUyBCb2FyZCBvbiBHZW9ncmFwaGljIE5hbWVzLgoyMDEyCVRoaXMgZW50
cnkgc2hvd3Mgd2hlcmUgcHJvZHVjdGlvbiB0YWtlcyBwbGFjZSBpbiBhbiBlY29ub215LiAg
VGhlIGRpc3RyaWJ1dGlvbiBnaXZlcyB0aGUgcGVyY2VudGFnZSBjb250cmlidXRpb24gb2Yg
YWdyaWN1bHR1cmUsIGluZHVzdHJ5ICwgYW5kIHNlcnZpY2VzIHRvIHRvdGFsIEdEUCwgYW5k
IHdpbGwgdG90YWwgMTAwIHBlcmNlbnQgb2YgR0RQIGlmIHRoZSBkYXRhIGFyZSBjb21wbGV0
ZS4gQWdyaWN1bHR1cmUgaW5jbHVkZXMgZmFybWluZywgZmlzaGluZywgYW5kIGZvcmVzdHJ5
LiBJbmR1c3RyeSBpbmNsdWRlcyBtaW5pbmcsIG1hbnVmYWN0dXJpbmcsIGVuZXJneSBwcm9k
dWN0aW9uLCBhbmQgY29uc3RydWN0aW9uLiBTZXJ2aWNlcyBjb3ZlciBnb3Zlcm5tZW50IGFj
dGl2aXRpZXMsIGNvbW11bmljYXRpb25zLCB0cmFuc3BvcnRhdGlvbiwgZmluYW5jZSwgYW5k
IGFsbCBvdGhlciBwcml2YXRlIGVjb25vbWljIGFjdGl2aXRpZXMgdGhhdCBkbyBub3QgcHJv
ZHVjZSBtYXRlcmlhbCBnb29kcy4KMjAxOAlUaGlzIGVudHJ5IGluY2x1ZGVzIHRoZSBudW1i
ZXIgb2YgbWFsZXMgZm9yIGVhY2ggZmVtYWxlIGluIGZpdmUgYWdlIGdyb3VwcyAtIGF0IGJp
cnRoICwgdW5kZXIgMTUgeWVhcnMgLCAxNS02NCB5ZWFycyAsIDY1IHllYXJzIGFuZCBvdmVy
ICwgYW5kIGZvciB0aGUgdG90YWwgcG9wdWxhdGlvbiAuIFNleCByYXRpbyBhdCBiaXJ0aCBo
YXMgcmVjZW50bHkgZW1lcmdlZCBhcyBhbiBpbmRpY2F0b3Igb2YgY2VydGFpbiBraW5kcyBv
ZiBzZXggZGlzY3JpbWluYXRpb24gaW4gc29tZSBjb3VudHJpZXMuIEZvciBpbnN0YW5jZSwg
aGlnaCBzZXggcmF0aW9zIGF0IGJpcnRoIGluIHNvbWUgQXNpYW4gY291bnRyaWVzIGFyZSBu
b3cgYXR0cmlidXRlZCB0byBzZXgtc2VsZWN0aXZlIGFib3J0aW9uIGFuZCBpbmZhbnRpY2lk
ZSBkdWUgdG8gYSBzdHJvbmcgcHJlZmVyZW5jZSBmb3Igc29ucy4gVGhpcyB3aWxsIGFmZmVj
dCBmdXR1cmUgbWFycmlhZ2UgcGF0dGVybnMgYW5kIGZlcnRpbGl0eSBwYXR0ZXJucy4gRXZl
bnR1YWxseSwgaXQgY291bGQgY2F1c2UgdW5yZXN0IGFtb25nIHlvdW5nIGFkdWx0IG1hbGVz
IHdobyBhcmUgdW5hYmxlIHRvIGZpbmQgcGFydG5lcnMuCjIwMTkJVGhpcyBlbnRyeSBnaXZl
cyB0aGUgdG90YWwgbnVtYmVyIG9mIGhlbGlwb3J0cyB3aXRoIGhhcmQtc3VyZmFjZSBydW53
YXlzLCBoZWxpcGFkcywgb3IgbGFuZGluZyBhcmVhcyB0aGF0IHN1cHBvcnQgcm91dGluZSBz
dXN0YWluZWQgaGVsaWNvcHRlciBvcGVyYXRpb25zIGV4Y2x1c2l2ZWx5IGFuZCBoYXZlIHN1
cHBvcnQgZmFjaWxpdGllcyBpbmNsdWRpbmcgb25lIG9yIG1vcmUgb2YgdGhlIGZvbGxvd2lu
ZyBmYWNpbGl0aWVzOiBsaWdodGluZywgZnVlbCwgcGFzc2VuZ2VyIGhhbmRsaW5nLCBvciBt
YWludGVuYW5jZS4gIEl0IGluY2x1ZGVzIGZvcm1lciBhaXJwb3J0cyB1c2VkIGV4Y2x1c2l2
ZWx5IGZvciBoZWxpY29wdGVyIG9wZXJhdGlvbnMgYnV0IGV4Y2x1ZGVzIGhlbGlwb3J0cyBs
aW1pdGVkIHRvIGRheSBvcGVyYXRpb25zIGFuZCBuYXR1cmFsIGNsZWFyaW5ncyB0aGF0IGNv
dWxkIHN1cHBvcnQgaGVsaWNvcHRlciBsYW5kaW5ncyBhbmQgdGFrZW9mZnMuCjIwMjAJVGhp
cyBlbnRyeSBpbmNsdWRlcyBib3RoIHRoZSBoaWdoZXN0IHBvaW50IGFuZCB0aGUgbG93ZXN0
IHBvaW50LgoyMDIxCVRoaXMgZW50cnkgbGlzdHMgcG90ZW50aWFsIG5hdHVyYWwgZGlzYXN0
ZXJzLiBGb3IgY291bnRyaWVzIHdoZXJlIHZvbGNhbmljIGFjdGl2aXR5IGlzIGNvbW1vbiwg
YSB2b2xjYW5pc20gc3ViZmllbGQgaGlnaGxpZ2h0cyBoaXN0b3JpY2FsbHkgYWN0aXZlIHZv
bGNhbm9lcy4KMjAyMglUaGlzIGVudHJ5IGluY2x1ZGVzIG1pc2NlbGxhbmVvdXMgZGVtb2dy
YXBoaWMgaW5mb3JtYXRpb24gb2Ygc2lnbmlmaWNhbmNlIG5vdCBpbmNsdWRlZCBlbHNld2hl
cmUuCjIwMjMJVGhpcyBlbnRyeSBwcm92aWRlcyBhbiBhcmVhIGNvbXBhcmlzb24gYmFzZWQg
b24gdG90YWwgYXJlYSBlcXVpdmFsZW50cy4gTW9zdCBlbnRpdGllcyBhcmUgY29tcGFyZWQg
d2l0aCB0aGUgZW50aXJlIFVTIG9yIG9uZSBvZiB0aGUgNTAgc3RhdGVzIGJhc2VkIG9uIGFy
ZWEgbWVhc3VyZW1lbnRzICgxOTkwIHJldmlzZWQpIHByb3ZpZGVkIGJ5IHRoZSBVUyBCdXJl
YXUgb2YgdGhlIENlbnN1cy4gVGhlIHNtYWxsZXIgZW50aXRpZXMgYXJlIGNvbXBhcmVkIHdp
dGggV2FzaGluZ3RvbiwgREMgKDE3OCBzcSBrbSwgNjkgc3EgbWkpIG9yIFRoZSBNYWxsIGlu
IFdhc2hpbmd0b24sIERDICgwLjU5IHNxIGttLCAwLjIzIHNxIG1pLCAxNDYgYWNyZXMpLgoy
MDI0CVRoaXMgZW50cnkgZ2l2ZXMgdGhlIHJlcXVpcmVkIGFnZXMgZm9yIHZvbHVudGFyeSBv
ciBjb25zY3JpcHQgbWlsaXRhcnkgc2VydmljZSBhbmQgdGhlIGxlbmd0aCBvZiBzZXJ2aWNl
IG9ibGlnYXRpb24uCjIwMjUJVGhpcyBlbnRyeSBnaXZlcyB0aGUgbnVtYmVyIG9mIG1hbGVz
IGFuZCBmZW1hbGVzIGZhbGxpbmcgaW4gdGhlIG1pbGl0YXJ5IGFnZSByYW5nZSBmb3IgYSBj
b3VudHJ5IChkZWZpbmVkIGFzIGJlaW5nIGFnZXMgMTYtNDkpIGFuZCB3aG8gYXJlIG5vdCBv
dGhlcndpc2UgZGlzcXVhbGlmaWVkIGZvciBoZWFsdGggcmVhc29uczsgYWNjb3VudHMgZm9y
IHRoZSBoZWFsdGggc2l0dWF0aW9uIGluIHRoZSBjb3VudHJ5IGFuZCBwcm92aWRlcyBhIG1v
cmUgcmVhbGlzdGljIGVzdGltYXRlIG9mIHRoZSBhY3R1YWwgbnVtYmVyIGZpdCB0byBzZXJ2
ZS4KMjAyNglUaGlzIGVudHJ5IGdpdmVzIHRoZSBudW1iZXIgb2YgbWFsZXMgYW5kIGZlbWFs
ZXMgZW50ZXJpbmcgdGhlIG1pbGl0YXJ5IG1hbnBvd2VyIHBvb2wgKGkuZS4sIHJlYWNoaW5n
IGFnZSAxNikgaW4gYW55IGdpdmVuIHllYXIgYW5kIGlzIGEgbWVhc3VyZSBvZiB0aGUgYXZh
aWxhYmlsaXR5IG9mIG1pbGl0YXJ5LWFnZSB5b3VuZyBhZHVsdHMuCjIwMjgJVGhpcyBlbnRy
eSB1c3VhbGx5IGhpZ2hsaWdodHMgbWFqb3IgaGlzdG9yaWMgZXZlbnRzIGFuZCBjdXJyZW50
IGlzc3VlcyBhbmQgbWF5IGluY2x1ZGUgYSBzdGF0ZW1lbnQgYWJvdXQgb25lIG9yIHR3byBr
ZXkgZnV0dXJlIHRyZW5kcy4KMjAzMAlUaGlzIGVudHJ5IGdpdmVzIHRoZSB0b3RhbCBudW1i
ZXIgb2YgYWlycG9ydHMgd2l0aCBwYXZlZCBydW53YXlzIChjb25jcmV0ZSBvciBhc3BoYWx0
IHN1cmZhY2VzKSBieSBsZW5ndGguIEZvciBhaXJwb3J0cyB3aXRoIG1vcmUgdGhhbiBvbmUg
cnVud2F5LCBvbmx5IHRoZSBsb25nZXN0IHJ1bndheSBpcyBpbmNsdWRlZCBhY2NvcmRpbmcg
dG8gdGhlIGZvbGxvd2luZyBmaXZlIGdyb3VwcyAtICgxKSBvdmVyIDMsMDQ3IG0gKG92ZXIg
MTAsMDAwIGZ0KSwgKDIpIDIsNDM4IHRvIDMsMDQ3IG0gKDgsMDAwIHRvIDEwLDAwMCBmdCks
ICgzKSAxLDUyNCB0byAyLDQzNyBtICg1LDAwMCB0byA4LDAwMCBmdCksICg0KSA5MTQgdG8g
MSw1MjMgbSAoMywwMDAgdG8gNSwwMDAgZnQpLCBhbmQgKDUpIHVuZGVyIDkxNCBtICh1bmRl
ciAzLDAwMCBmdCkuIE9ubHkgYWlycG9ydHMgd2l0aCB1c2FibGUgcnVud2F5cyBhcmUgaW5j
bHVkZWQgaW4gdGhpcyBsaXN0aW5nLiBOb3QgYWxsIGFpcnBvcnRzIGhhdmUgZmFjaWxpdGll
cyBmb3IgcmVmdWVsaW5nLCBtYWludGVuYW5jZSwgb3IgYWlyIHRyYWZmaWMgY29udHJvbC4g
VGhlIHR5cGUgYWlyY3JhZnQgY2FwYWJsZSBvZiBvcGVyYXRpbmcgZnJvbSBhIHJ1bndheSBv
ZiBhIGdpdmVuIGxlbmd0aCBpcyBkZXBlbmRlbnQgdXBvbiBhIG51bWJlciBvZiBmYWN0b3Jz
IGluY2x1ZGluZyBlbGV2YXRpb24gb2YgdGhlIHJ1bndheSwgcnVud2F5IGdyYWRpZW50LCBh
dmVyYWdlIG1heGltdW0gZGFpbHkgdGVtcGVyYXR1cmUgYXQgdGhlIGFpcnBvcnQsIGVuZ2lu
ZSB0eXBlcywgZmxhcCBzZXR0aW5ncywgYW5kIHRha2Utb2ZmIHdlaWdodCBvZiB0aGUgYWly
Y3JhZnQuCjIwMzEJVGhpcyBlbnRyeSBnaXZlcyB0aGUgdG90YWwgbnVtYmVyIG9mIGFpcnBv
cnRzIHdpdGggdW5wYXZlZCBydW53YXlzIChncmFzcywgZGlydCwgc2FuZCwgb3IgZ3JhdmVs
IHN1cmZhY2VzKSBieSBsZW5ndGguIEZvciBhaXJwb3J0cyB3aXRoIG1vcmUgdGhhbiBvbmUg
cnVud2F5LCBvbmx5IHRoZSBsb25nZXN0IHJ1bndheSBpcyBpbmNsdWRlZCBhY2NvcmRpbmcg
dG8gdGhlIGZvbGxvd2luZyBmaXZlIGdyb3VwcyAtICgxKSBvdmVyIDMsMDQ3IG0gKG92ZXIg
MTAsMDAwIGZ0KSwgKDIpIDIsNDM4IHRvIDMsMDQ3IG0gKDgsMDAwIHRvIDEwLDAwMCBmdCks
ICgzKSAxLDUyNCB0byAyLDQzNyBtICg1LDAwMCB0byA4LDAwMCBmdCksICg0KSA5MTQgdG8g
MSw1MjMgbSAoMywwMDAgdG8gNSwwMDAgZnQpLCBhbmQgKDUpIHVuZGVyIDkxNCBtICh1bmRl
ciAzLDAwMCBmdCkuIE9ubHkgYWlycG9ydHMgd2l0aCB1c2FibGUgcnVud2F5cyBhcmUgaW5j
bHVkZWQgaW4gdGhpcyBsaXN0aW5nLiBOb3QgYWxsIGFpcnBvcnRzIGhhdmUgZmFjaWxpdGll
cyBmb3IgcmVmdWVsaW5nLCBtYWludGVuYW5jZSwgb3IgYWlyIHRyYWZmaWMgY29udHJvbC4g
VGhlIHR5cGUgYWlyY3JhZnQgY2FwYWJsZSBvZiBvcGVyYXRpbmcgZnJvbSBhIHJ1bndheSBv
ZiBhIGdpdmVuIGxlbmd0aCBpcyBkZXBlbmRlbnQgdXBvbiBhIG51bWJlciBvZiBmYWN0b3Jz
IGluY2x1ZGluZyBlbGV2YXRpb24gb2YgdGhlIHJ1bndheSwgcnVud2F5IGdyYWRpZW50LCBh
dmVyYWdlIG1heGltdW0gZGFpbHkgdGVtcGVyYXR1cmUgYXQgdGhlIGFpcnBvcnQsIGVuZ2lu
ZSB0eXBlcywgZmxhcCBzZXR0aW5ncywgYW5kIHRha2Utb2ZmIHdlaWdodCBvZiB0aGUgYWly
Y3JhZnQuCjIwMzIJVGhpcyBlbnRyeSBsaXN0cyB0aGUgbW9zdCBwcmVzc2luZyBhbmQgaW1w
b3J0YW50IGVudmlyb25tZW50YWwgcHJvYmxlbXMuICBUaGUgZm9sbG93aW5nIHRlcm1zIGFu
ZCBhYmJyZXZpYXRpb25zIGFyZSB1c2VkIHRocm91Z2hvdXQgdGhlIGVudHJ5OiBBY2lkaWZp
Y2F0aW9uIC0gdGhlIGxvd2VyaW5nIG9mIHNvaWwgYW5kIHdhdGVyIHBIIGR1ZSB0byBhY2lk
IHByZWNpcGl0YXRpb24gYW5kIGRlcG9zaXRpb24gdXN1YWxseSB0aHJvdWdoIHByZWNpcGl0
YXRpb247IHRoaXMgcHJvY2VzcyBkaXNydXB0cyBlY29zeXN0ZW0gbnV0cmllbnQgZmxvd3Mg
YW5kIG1heSBraWxsIGZyZXNod2F0ZXIgZmlzaCBhbmQgcGxhbnRzIGRlcGVuZGVudCBvbiBt
b3JlIG5ldXRyYWwgb3IgYWxrYWxpbmUgY29uZGl0aW9ucyAoc2VlIGFjaWQgcmFpbikuIEFj
aWQgcmFpbiAtIGNoYXJhY3Rlcml6ZWQgYXMgY29udGFpbmluZyBoYXJtZnVsIGxldmVscyBv
ZiBzdWxmdXIgZGlveGlkZSBvciBuaXRyb2dlbiBveGlkZTsgYWNpZCByYWluIGlzIGRhbWFn
aW5nIGFuZCBwb3RlbnRpYWxseSBkZWFkbHkgdG8gdGhlIGVhcnRoJ3MgZnJhZ2lsZSBlY29z
eXN0ZW1zOyBhY2lkaXR5IGlzIG1lYXN1cmVkIHVzaW5nIHRoZSBwSCBzY2FsZSB3aGVyZSA3
IGlzIG5ldXRyYWwsIHZhbHVlcyBncmVhdGVyIHRoYW4gNyBhcmUgY29uc2lkZXJlZCBhbGth
bGluZSwgYW5kIHZhbHVlcyBiZWxvdyA1LjYgYXJlIGNvbnNpZGVyZWQgYWNpZCBwcmVjaXBp
dGF0aW9uOyBub3RlIC0gYSBwSCBvZiAyLjQgKHRoZSBhY2lkaXR5IG9mIHZpbmVnYXIpIGhh
cyBiZWVuIG1lYXN1cmVkIGluIHJhaW5mYWxsIGluIE5ldyBFbmdsYW5kLiBBZXJvc29sIC0g
YSBjb2xsZWN0aW9uIG9mIGFpcmJvcm5lIHBhcnRpY2xlcyBkaXNwZXJzZWQgaW4gYSBnYXMs
IHNtb2tlLCBvciBmb2cuIEFmZm9yZXN0YXRpb24gLSBjb252ZXJ0aW5nIGEgYmFyZSBvciBh
Z3JpY3VsdHVyYWwgc3BhY2UgYnkgcGxhbnRpbmcgdHJlZXMgYW5kIHBsYW50czsgcmVmb3Jl
c3RhdGlvbiBpbnZvbHZlcyByZXBsYW50aW5nIHRyZWVzIG9uIGFyZWFzIHRoYXQgaGF2ZSBi
ZWVuIGN1dCBvciBkZXN0cm95ZWQgYnkgZmlyZS4gQXNiZXN0b3MgLSBhIG5hdHVyYWxseSBv
Y2N1cnJpbmcgc29mdCBmaWJyb3VzIG1pbmVyYWwgY29tbW9ubHkgdXNlZCBpbiBmaXJlcHJv
b2ZpbmcgbWF0ZXJpYWxzIGFuZCBjb25zaWRlcmVkIHRvIGJlIGhpZ2hseSBjYXJjaW5vZ2Vu
aWMgaW4gcGFydGljdWxhdGUgZm9ybS4gQmlvZGl2ZXJzaXR5IC0gYWxzbyBiaW9sb2dpY2Fs
IGRpdmVyc2l0eTsgdGhlIHJlbGF0aXZlIG51bWJlciBvZiBzcGVjaWVzLCBkaXZlcnNlIGlu
IGZvcm0gYW5kIGZ1bmN0aW9uLCBhdCB0aGUgZ2VuZXRpYywgb3JnYW5pc20sIGNvbW11bml0
eSwgYW5kIGVjb3N5c3RlbSBsZXZlbDsgbG9zcyBvZiBiaW9kaXZlcnNpdHkgcmVkdWNlcyBh
biBlY29zeXN0ZW0ncyBhYmlsaXR5IHRvIHJlY292ZXIgZnJvbSBuYXR1cmFsIG9yIG1hbi1p
bmR1Y2VkIGRpc3J1cHRpb24uIEJpby1pbmRpY2F0b3JzIC0gYSBwbGFudCBvciBhbmltYWwg
c3BlY2llcyB3aG9zZSBwcmVzZW5jZSwgYWJ1bmRhbmNlLCBhbmQgaGVhbHRoIHJldmVhbCB0
aGUgZ2VuZXJhbCBjb25kaXRpb24gb2YgaXRzIGhhYml0YXQuIEJpb21hc3MgLSB0aGUgdG90
YWwgd2VpZ2h0IG9yIHZvbHVtZSBvZiBsaXZpbmcgbWF0dGVyIGluIGEgZ2l2ZW4gYXJlYSBv
ciB2b2x1bWUuIENhcmJvbiBjeWNsZSAtIHRoZSB0ZXJtIHVzZWQgdG8gZGVzY3JpYmUgdGhl
IGV4Y2hhbmdlIG9mIGNhcmJvbiAoaW4gdmFyaW91cyBmb3JtcywgZS5nLiwgYXMgY2FyYm9u
IGRpb3hpZGUpIGJldHdlZW4gdGhlIGF0bW9zcGhlcmUsIG9jZWFuLCB0ZXJyZXN0cmlhbCBi
aW9zcGhlcmUsIGFuZCBnZW9sb2dpY2FsIGRlcG9zaXRzLiBDYXRjaG1lbnRzIC0gYXNzZW1i
bGFnZXMgdXNlZCB0byBjYXB0dXJlIGFuZCByZXRhaW4gcmFpbndhdGVyIGFuZCBydW5vZmY7
IGFuIGltcG9ydGFudCB3YXRlciBtYW5hZ2VtZW50IHRlY2huaXF1ZSBpbiBhcmVhcyB3aXRo
IGxpbWl0ZWQgZnJlc2h3YXRlciByZXNvdXJjZXMsIHN1Y2ggYXMgR2licmFsdGFyLiBERFQg
KGRpY2hsb3JvLWRpcGhlbnlsLXRyaWNobG9yby1ldGhhbmUpIC0gYSBjb2xvcmxlc3MsIG9k
b3JsZXNzIGluc2VjdGljaWRlIHRoYXQgaGFzIHRveGljIGVmZmVjdHMgb24gbW9zdCBhbmlt
YWxzOyB0aGUgdXNlIG9mIEREVCB3YXMgYmFubmVkIGluIHRoZSBVUyBpbiAxOTcyLiBEZWZv
bGlhbnRzIC0gY2hlbWljYWxzIHdoaWNoIGNhdXNlIHBsYW50cyB0byBsb3NlIHRoZWlyIGxl
YXZlcyBhcnRpZmljaWFsbHk7IG9mdGVuIHVzZWQgaW4gYWdyaWN1bHR1cmFsIHByYWN0aWNl
cyBmb3Igd2VlZCBjb250cm9sLCBhbmQgbWF5IGhhdmUgZGV0cmltZW50YWwgaW1wYWN0cyBv
biBodW1hbiBhbmQgZWNvc3lzdGVtIGhlYWx0aC4gRGVmb3Jlc3RhdGlvbiAtIHRoZSBkZXN0
cnVjdGlvbiBvZiB2YXN0IGFyZWFzIG9mIGZvcmVzdCAoZS5nLiwgdW5zdXN0YWluYWJsZSBm
b3Jlc3RyeSBwcmFjdGljZXMsIGFncmljdWx0dXJhbCBhbmQgcmFuZ2UgbGFuZCBjbGVhcmlu
ZywgYW5kIHRoZSBvdmVyIGV4cGxvaXRhdGlvbiBvZiB3b29kIHByb2R1Y3RzIGZvciB1c2Ug
YXMgZnVlbCkgd2l0aG91dCBwbGFudGluZyBuZXcgZ3Jvd3RoLiBEZXNlcnRpZmljYXRpb24g
LSB0aGUgc3ByZWFkIG9mIGRlc2VydC1saWtlIGNvbmRpdGlvbnMgaW4gYXJpZCBvciBzZW1p
LWFyaWQgYXJlYXMsIGR1ZSB0byBvdmVyZ3JhemluZywgbG9zcyBvZiBhZ3JpY3VsdHVyYWxs
eSBwcm9kdWN0aXZlIHNvaWxzLCBvciBjbGltYXRlIGNoYW5nZS4gRHJlZGdpbmcgLSB0aGUg
cHJhY3RpY2Ugb2YgZGVlcGVuaW5nIGFuIGV4aXN0aW5nIHdhdGVyd2F5OyBhbHNvLCBhIHRl
Y2huaXF1ZSB1c2VkIGZvciBjb2xsZWN0aW5nIGJvdHRvbS1kd2VsbGluZyBtYXJpbmUgb3Jn
YW5pc21zIChlLmcuLCBzaGVsbGZpc2gpIG9yIGhhcnZlc3RpbmcgY29yYWwsIG9mdGVuIGNh
dXNpbmcgc2lnbmlmaWNhbnQgZGVzdHJ1Y3Rpb24gb2YgcmVlZiBhbmQgb2NlYW4tZmxvb3Ig
ZWNvc3lzdGVtcy4gRHJpZnQtbmV0IGZpc2hpbmcgLSBkb25lIHdpdGggYSBuZXQsIG1pbGVz
IGluIGV4dGVudCwgdGhhdCBpcyBnZW5lcmFsbHkgYW5jaG9yZWQgdG8gYSBib2F0IGFuZCBs
ZWZ0IHRvIGZsb2F0IHdpdGggdGhlIHRpZGU7IG9mdGVuIHJlc3VsdHMgaW4gYW4gb3ZlciBo
YXJ2ZXN0aW5nIGFuZCB3YXN0ZSBvZiBsYXJnZSBwb3B1bGF0aW9ucyBvZiBub24tY29tbWVy
Y2lhbCBtYXJpbmUgc3BlY2llcyAoYnktY2F0Y2gpIGJ5IGl0cyBlZmZlY3Qgb2YgInN3ZWVw
aW5nIHRoZSBvY2VhbiBjbGVhbi4iIEVjb3N5c3RlbXMgLSBlY29sb2dpY2FsIHVuaXRzIGNv
bXByaXNlZCBvZiBjb21wbGV4IGNvbW11bml0aWVzIG9mIG9yZ2FuaXNtcyBhbmQgdGhlaXIg
c3BlY2lmaWMgZW52aXJvbm1lbnRzLiBFZmZsdWVudCBzIC0gd2FzdGUgbWF0ZXJpYWxzLCBz
dWNoIGFzIHNtb2tlLCBzZXdhZ2UsIG9yIGluZHVzdHJpYWwgd2FzdGUgd2hpY2ggYXJlIHJl
bGVhc2VkIGludG8gdGhlIGVudmlyb25tZW50LCBzdWJzZXF1ZW50bHkgcG9sbHV0aW5nIGl0
LiBFbmRhbmdlcmVkIHNwZWNpZXMgLSBhIHNwZWNpZXMgdGhhdCBpcyB0aHJlYXRlbmVkIHdp
dGggZXh0aW5jdGlvbiBlaXRoZXIgYnkgZGlyZWN0IGh1bnRpbmcgb3IgaGFiaXRhdCBkZXN0
cnVjdGlvbi4gRnJlc2h3YXRlciAtIHdhdGVyIHdpdGggdmVyeSBsb3cgc29sdWJsZSBtaW5l
cmFsIGNvbnRlbnQ7IHNvdXJjZXMgaW5jbHVkZSBsYWtlcywgc3RyZWFtcywgcml2ZXJzLCBn
bGFjaWVycywgYW5kIHVuZGVyZ3JvdW5kIGFxdWlmZXJzLiBHcmVlbmhvdXNlIGdhcyAtIGEg
Z2FzIHRoYXQgInRyYXBzIiBpbmZyYXJlZCByYWRpYXRpb24gaW4gdGhlIGxvd2VyIGF0bW9z
cGhlcmUgY2F1c2luZyBzdXJmYWNlIHdhcm1pbmc7IHdhdGVyIHZhcG9yLCBjYXJib24gZGlv
eGlkZSwgbml0cm91cyBveGlkZSwgbWV0aGFuZSwgaHlkcm9mbHVvcm9jYXJib25zLCBhbmQg
b3pvbmUgYXJlIHRoZSBwcmltYXJ5IGdyZWVuaG91c2UgZ2FzZXMgaW4gdGhlIEVhcnRoJ3Mg
YXRtb3NwaGVyZS4gR3JvdW5kd2F0ZXIgLSB3YXRlciBzb3VyY2VzIGZvdW5kIGJlbG93IHRo
ZSBzdXJmYWNlIG9mIHRoZSBlYXJ0aCBvZnRlbiBpbiBuYXR1cmFsbHkgb2NjdXJyaW5nIHJl
c2Vydm9pcnMgaW4gcGVybWVhYmxlIHJvY2sgc3RyYXRhOyB0aGUgc291cmNlIGZvciB3ZWxs
cyBhbmQgbmF0dXJhbCBzcHJpbmdzLiBIaWdobGFuZHMgV2F0ZXIgUHJvamVjdCAtIGEgc2Vy
aWVzIG9mIGRhbXMgY29uc3RydWN0ZWQgam9pbnRseSBieSBMZXNvdGhvIGFuZCBTb3V0aCBB
ZnJpY2EgdG8gcmVkaXJlY3QgTGVzb3RobydzIGFidW5kYW50IHdhdGVyIHN1cHBseSBpbnRv
IGEgcmFwaWRseSBncm93aW5nIGFyZWEgaW4gU291dGggQWZyaWNhOyB3aGlsZSBpdCBpcyB0
aGUgbGFyZ2VzdCBpbmZyYXN0cnVjdHVyZSBwcm9qZWN0IGluIHNvdXRoZXJuIEFmcmljYSwg
aXQgaXMgYWxzbyB0aGUgbW9zdCBjb3N0bHkgYW5kIGNvbnRyb3ZlcnNpYWw7IG9iamVjdGlv
bnMgdG8gdGhlIHByb2plY3QgaW5jbHVkZSBjbGFpbXMgdGhhdCBpdCBmb3JjZXMgcGVvcGxl
IGZyb20gdGhlaXIgaG9tZXMsIHN1Ym1lcmdlcyBmYXJtbGFuZHMsIGFuZCBzcXVhbmRlcnMg
ZWNvbm9taWMgcmVzb3VyY2VzLiBJbnVpdCBDaXJjdW1wb2xhciBDb25mZXJlbmNlIChJQ0Mp
IC0gcmVwcmVzZW50cyB0aGUgcm91Z2hseSAxNTAsMDAwIEludWl0cyBvZiBBbGFza2EsIENh
bmFkYSwgR3JlZW5sYW5kLCBhbmQgUnVzc2lhIGluIGludGVybmF0aW9uYWwgZW52aXJvbm1l
bnRhbCBpc3N1ZXM7IGEgR2VuZXJhbCBBc3NlbWJseSBjb252ZW5lcyBldmVyeSB0aHJlZSB5
ZWFycyB0byBkZXRlcm1pbmUgdGhlIGZvY3VzIG9mIHRoZSBJQ0M7IHRoZSBtb3N0IGN1cnJl
bnQgY29uY2VybnMgYXJlIGxvbmctcmFuZ2UgdHJhbnNwb3J0IG9mIHBvbGx1dGFudHMsIHN1
c3RhaW5hYmxlIGRldmVsb3BtZW50LCBhbmQgY2xpbWF0ZSBjaGFuZ2UuIE1ldGFsbHVyZ2lj
YWwgcGxhbnRzIC0gaW5kdXN0cmllcyB3aGljaCBzcGVjaWFsaXplIGluIHRoZSBzY2llbmNl
LCB0ZWNobm9sb2d5LCBhbmQgcHJvY2Vzc2luZyBvZiBtZXRhbHM7IHRoZXNlIHBsYW50cyBw
cm9kdWNlIGhpZ2hseSBjb25jZW50cmF0ZWQgYW5kIHRveGljIHdhc3RlcyB3aGljaCBjYW4g
Y29udHJpYnV0ZSB0byBwb2xsdXRpb24gb2YgZ3JvdW5kIHdhdGVyIGFuZCBhaXIgd2hlbiBu
b3QgcHJvcGVybHkgZGlzcG9zZWQuIE5veGlvdXMgc3Vic3RhbmNlcyAtIGluanVyaW91cywg
dmVyeSBoYXJtZnVsIHRvIGxpdmluZyBiZWluZ3MuIE92ZXJncmF6aW5nIC0gdGhlIGdyYXpp
bmcgb2YgYW5pbWFscyBvbiBwbGFudCBtYXRlcmlhbCBmYXN0ZXIgdGhhbiBpdCBjYW4gbmF0
dXJhbGx5IHJlZ3JvdyBsZWFkaW5nIHRvIHRoZSBwZXJtYW5lbnQgbG9zcyBvZiBwbGFudCBj
b3ZlciwgYSBjb21tb24gZWZmZWN0IG9mIHRvbyBtYW55IGFuaW1hbHMgZ3JhemluZyBsaW1p
dGVkIHJhbmdlIGxhbmQuIE96b25lIHNoaWVsZCAtIGEgbGF5ZXIgb2YgdGhlIGF0bW9zcGhl
cmUgY29tcG9zZWQgb2Ygb3pvbmUgZ2FzIChPMykgdGhhdCByZXNpZGVzIGFwcHJveGltYXRl
bHkgMjUgbWlsZXMgYWJvdmUgdGhlIEVhcnRoJ3Mgc3VyZmFjZSBhbmQgYWJzb3JicyBzb2xh
ciB1bHRyYXZpb2xldCByYWRpYXRpb24gdGhhdCBjYW4gYmUgaGFybWZ1bCB0byBsaXZpbmcg
b3JnYW5pc21zLiBQb2FjaGluZyAtIHRoZSBpbGxlZ2FsIGtpbGxpbmcgb2YgYW5pbWFscyBv
ciBmaXNoLCBhIGdyZWF0IGNvbmNlcm4gd2l0aCByZXNwZWN0IHRvIGVuZGFuZ2VyZWQgb3Ig
dGhyZWF0ZW5lZCBzcGVjaWVzLiBQb2xsdXRpb24gLSB0aGUgY29udGFtaW5hdGlvbiBvZiBh
IGhlYWx0aHkgZW52aXJvbm1lbnQgYnkgbWFuLW1hZGUgd2FzdGUuIFBvdGFibGUgd2F0ZXIg
LSB3YXRlciB0aGF0IGlzIGRyaW5rYWJsZSwgc2FmZSB0byBiZSBjb25zdW1lZC4gU2FsaW5h
dGlvbiAtIHRoZSBwcm9jZXNzIHRocm91Z2ggd2hpY2ggZnJlc2ggKGRyaW5rYWJsZSkgd2F0
ZXIgYmVjb21lcyBzYWx0ICh1bmRyaW5rYWJsZSkgd2F0ZXI7IGhlbmNlLCBkZXNhbGluYXRp
b24gaXMgdGhlIHJldmVyc2UgcHJvY2VzczsgYWxzbyBpbnZvbHZlcyB0aGUgYWNjdW11bGF0
aW9uIG9mIHNhbHRzIGluIHRvcHNvaWwgY2F1c2VkIGJ5IGV2YXBvcmF0aW9uIG9mIGV4Y2Vz
c2l2ZSBpcnJpZ2F0aW9uIHdhdGVyLCBhIHByb2Nlc3MgdGhhdCBjYW4gZXZlbnR1YWxseSBy
ZW5kZXIgc29pbCBpbmNhcGFibGUgb2Ygc3VwcG9ydGluZyBjcm9wcy4gU2lsdGF0aW9uIC0g
b2NjdXJzIHdoZW4gd2F0ZXIgY2hhbm5lbHMgYW5kIHJlc2Vydm9pcnMgYmVjb21lIGNsb3R0
ZWQgd2l0aCBzaWx0IGFuZCBtdWQsIGEgc2lkZSBlZmZlY3Qgb2YgZGVmb3Jlc3RhdGlvbiBh
bmQgc29pbCBlcm9zaW9uLiBTbGFzaC1hbmQtYnVybiBhZ3JpY3VsdHVyZSAtIGEgcm90YXRp
bmcgY3VsdGl2YXRpb24gdGVjaG5pcXVlIGluIHdoaWNoIHRyZWVzIGFyZSBjdXQgZG93biBh
bmQgYnVybmVkIGluIG9yZGVyIHRvIGNsZWFyIGxhbmQgZm9yIHRlbXBvcmFyeSBhZ3JpY3Vs
dHVyZTsgdGhlIGxhbmQgaXMgdXNlZCB1bnRpbCBpdHMgcHJvZHVjdGl2aXR5IGRlY2xpbmVz
IGF0IHdoaWNoIHBvaW50IGEgbmV3IHBsb3QgaXMgc2VsZWN0ZWQgYW5kIHRoZSBwcm9jZXNz
IHJlcGVhdHM7IHRoaXMgcHJhY3RpY2UgaXMgc3VzdGFpbmFibGUgd2hpbGUgcG9wdWxhdGlv
biBsZXZlbHMgYXJlIGxvdyBhbmQgdGltZSBpcyBwZXJtaXR0ZWQgZm9yIHJlZ3Jvd3RoIG9m
IG5hdHVyYWwgdmVnZXRhdGlvbjsgY29udmVyc2VseSwgd2hlcmUgdGhlc2UgY29uZGl0aW9u
cyBkbyBub3QgZXhpc3QsIHRoZSBwcmFjdGljZSBjYW4gaGF2ZSBkaXNhc3Ryb3VzIGNvbnNl
cXVlbmNlcyBmb3IgdGhlIGVudmlyb25tZW50LiBTb2lsIGRlZ3JhZGF0aW9uIC0gZGFtYWdl
IHRvIHRoZSBsYW5kJ3MgcHJvZHVjdGl2ZSBjYXBhY2l0eSBiZWNhdXNlIG9mIHBvb3IgYWdy
aWN1bHR1cmFsIHByYWN0aWNlcyBzdWNoIGFzIHRoZSBleGNlc3NpdmUgdXNlIG9mIHBlc3Rp
Y2lkZXMgb3IgZmVydGlsaXplcnMsIHNvaWwgY29tcGFjdGlvbiBmcm9tIGhlYXZ5IGVxdWlw
bWVudCwgb3IgZXJvc2lvbiBvZiB0b3Bzb2lsLCBldmVudHVhbGx5IHJlc3VsdGluZyBpbiBy
ZWR1Y2VkIGFiaWxpdHkgdG8gcHJvZHVjZSBhZ3JpY3VsdHVyYWwgcHJvZHVjdHMuIFNvaWwg
ZXJvc2lvbiAtIHRoZSByZW1vdmFsIG9mIHNvaWwgYnkgdGhlIGFjdGlvbiBvZiB3YXRlciBv
ciB3aW5kLCBjb21wb3VuZGVkIGJ5IHBvb3IgYWdyaWN1bHR1cmFsIHByYWN0aWNlcywgZGVm
b3Jlc3RhdGlvbiwgb3ZlcmdyYXppbmcsIGFuZCBkZXNlcnRpZmljYXRpb24uIFVsdHJhdmlv
bGV0IChVVikgcmFkaWF0aW9uIC0gYSBwb3J0aW9uIG9mIHRoZSBlbGVjdHJvbWFnbmV0aWMg
ZW5lcmd5IGVtaXR0ZWQgYnkgdGhlIHN1biBhbmQgbmF0dXJhbGx5IGZpbHRlcmVkIGluIHRo
ZSB1cHBlciBhdG1vc3BoZXJlIGJ5IHRoZSBvem9uZSBsYXllcjsgVVYgcmFkaWF0aW9uIGNh
biBiZSBoYXJtZnVsIHRvIGxpdmluZyBvcmdhbmlzbXMgYW5kIGhhcyBiZWVuIGxpbmtlZCB0
byBpbmNyZWFzaW5nIHJhdGVzIG9mIHNraW4gY2FuY2VyIGluIGh1bWFucy4gV2F0ZXJib3Ju
ZSBkaXNlYXNlcyAtIHRob3NlIGluIHdoaWNoIGJhY3RlcmlhIHN1cnZpdmUgaW4sIGFuZCBh
cmUgdHJhbnNtaXR0ZWQgdGhyb3VnaCwgd2F0ZXI7IGFsd2F5cyBhIHNlcmlvdXMgdGhyZWF0
IGluIGFyZWFzIHdpdGggYW4gdW50cmVhdGVkIHdhdGVyIHN1cHBseS4KMjAzMwlUaGlzIGVu
dHJ5IHNlcGFyYXRlcyBjb3VudHJ5IHBhcnRpY2lwYXRpb24gaW4gaW50ZXJuYXRpb25hbCBl
bnZpcm9ubWVudGFsIGFncmVlbWVudHMgaW50byB0d28gbGV2ZWxzIC0gcGFydHkgdG8gYW5k
IHNpZ25lZCwgYnV0IG5vdCByYXRpZmllZCAuIEFncmVlbWVudHMgYXJlIGxpc3RlZCBpbiBh
bHBoYWJldGljYWwgb3JkZXIgYnkgdGhlIGFiYnJldmlhdGVkIGZvcm0gb2YgdGhlIGZ1bGwg
bmFtZS4KMjAzNAlUaGlzIGVudHJ5IGdpdmVzIHNwZW5kaW5nIG9uIGRlZmVuc2UgcHJvZ3Jh
bXMgZm9yIHRoZSBtb3N0IHJlY2VudCB5ZWFyIGF2YWlsYWJsZSBhcyBhIHBlcmNlbnQgb2Yg
Z3Jvc3MgZG9tZXN0aWMgcHJvZHVjdCAoR0RQKTsgdGhlIEdEUCBpcyBjYWxjdWxhdGVkIG9u
IGFuIGV4Y2hhbmdlIHJhdGUgYmFzaXMsIGkuZS4sIG5vdCBpbiB0ZXJtcyBvZiBwdXJjaGFz
aW5nIHBvd2VyIHBhcml0eSAoUFBQKS4gRm9yIGNvdW50cmllcyB3aXRoIG5vIG1pbGl0YXJ5
IGZvcmNlcywgdGhpcyBmaWd1cmUgY2FuIGluY2x1ZGUgZXhwZW5kaXR1cmVzIG9uIHB1Ymxp
YyBzZWN1cml0eSBhbmQgcG9saWNlLgoyMDQ2CU5hdGlvbmFsIGVzdGltYXRlcyBvZiB0aGUg
cGVyY2VudGFnZSBvZiB0aGUgcG9wdWxhdGlvbiBmYWxsaW5nIGJlbG93IHRoZSBwb3ZlcnR5
IGxpbmUgYXJlIGJhc2VkIG9uIHN1cnZleXMgb2Ygc3ViLWdyb3Vwcywgd2l0aCB0aGUgcmVz
dWx0cyB3ZWlnaHRlZCBieSB0aGUgbnVtYmVyIG9mIHBlb3BsZSBpbiBlYWNoIGdyb3VwLiBE
ZWZpbml0aW9ucyBvZiBwb3ZlcnR5IHZhcnkgY29uc2lkZXJhYmx5IGFtb25nIG5hdGlvbnMu
IEZvciBleGFtcGxlLCByaWNoIG5hdGlvbnMgZ2VuZXJhbGx5IGVtcGxveSBtb3JlIGdlbmVy
b3VzIHN0YW5kYXJkcyBvZiBwb3ZlcnR5IHRoYW4gcG9vciBuYXRpb25zLgoyMDQ3CURhdGEg
b24gaG91c2Vob2xkIGluY29tZSBvciBjb25zdW1wdGlvbiBjb21lIGZyb20gaG91c2Vob2xk
IHN1cnZleXMsIHRoZSByZXN1bHRzIGFkanVzdGVkIGZvciBob3VzZWhvbGQgc2l6ZS4gTmF0
aW9ucyB1c2UgZGlmZmVyZW50IHN0YW5kYXJkcyBhbmQgcHJvY2VkdXJlcyBpbiBjb2xsZWN0
aW5nIGFuZCBhZGp1c3RpbmcgdGhlIGRhdGEuIFN1cnZleXMgYmFzZWQgb24gaW5jb21lIHdp
bGwgbm9ybWFsbHkgc2hvdyBhIG1vcmUgdW5lcXVhbCBkaXN0cmlidXRpb24gdGhhbiBzdXJ2
ZXlzIGJhc2VkIG9uIGNvbnN1bXB0aW9uLiBUaGUgcXVhbGl0eSBvZiBzdXJ2ZXlzIGlzIGlt
cHJvdmluZyB3aXRoIHRpbWUsIHlldCBjYXV0aW9uIGlzIHN0aWxsIG5lY2Vzc2FyeSBpbiBt
YWtpbmcgaW50ZXItY291bnRyeSBjb21wYXJpc29ucy4KMjA0OAlUaGlzIGVudHJ5IGxpc3Rz
IHRoZSBwZXJjZW50YWdlIGRpc3RyaWJ1dGlvbiBvZiB0aGUgbGFib3IgZm9yY2UgYnkgc2Vj
dG9yIG9mIG9jY3VwYXRpb24uIEFncmljdWx0dXJlIGluY2x1ZGVzIGZhcm1pbmcsIGZpc2hp
bmcsIGFuZCBmb3Jlc3RyeS4gSW5kdXN0cnkgaW5jbHVkZXMgbWluaW5nLCBtYW51ZmFjdHVy
aW5nLCBlbmVyZ3kgcHJvZHVjdGlvbiwgYW5kIGNvbnN0cnVjdGlvbi4gU2VydmljZXMgY292
ZXIgZ292ZXJubWVudCBhY3Rpdml0aWVzLCBjb21tdW5pY2F0aW9ucywgdHJhbnNwb3J0YXRp
b24sIGZpbmFuY2UsIGFuZCBhbGwgb3RoZXIgZWNvbm9taWMgYWN0aXZpdGllcyB0aGF0IGRv
IG5vdCBwcm9kdWNlIG1hdGVyaWFsIGdvb2RzLiBUaGUgZGlzdHJpYnV0aW9uIHdpbGwgdG90
YWwgbGVzcyB0aGFuIDEwMCBwZXJjZW50IGlmIHRoZSBkYXRhIGFyZSBpbmNvbXBsZXRlIGFu
ZCBtYXkgcmFuZ2UgZnJvbSA5OS0xMDEgcGVyY2VudCBkdWUgdG8gcm91bmRpbmcuCjIwNDkJ
VGhpcyBlbnRyeSBwcm92aWRlcyBhIGxpc3Rpbmcgb2YgdGhlIGhpZ2hlc3QtdmFsdWVkIGV4
cG9ydGVkIHByb2R1Y3RzOyBpdCBzb21ldGltZXMgaW5jbHVkZXMgdGhlIHBlcmNlbnQgb2Yg
dG90YWwgZG9sbGFyIHZhbHVlLgoyMDUwCVRoaXMgZW50cnkgcHJvdmlkZXMgYSByYW5rIG9y
ZGVyaW5nIG9mIHRyYWRpbmcgcGFydG5lcnMgc3RhcnRpbmcgd2l0aCB0aGUgbW9zdCBpbXBv
cnRhbnQ7IGl0IHNvbWV0aW1lcyBpbmNsdWRlcyB0aGUgcGVyY2VudCBvZiB0b3RhbCBkb2xs
YXIgdmFsdWUuCjIwNTEJVGhpcyBlbnRyeSBnZW5lcmFsbHkgZ2l2ZXMgdGhlIG51bWJlcnMs
IGRlc2lnbmF0b3J5IHRlcm1zLCBhbmQgZmlyc3Qtb3JkZXIgYWRtaW5pc3RyYXRpdmUgZGl2
aXNpb25zIGFzIGFwcHJvdmVkIGJ5IHRoZSBVUyBCb2FyZCBvbiBHZW9ncmFwaGljIE5hbWVz
IChCR04pLiBDaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIHJlcG9ydGVkIGJ1dCBub3QgeWV0IGFj
dGVkIG9uIGJ5IHRoZSBCR04gYXJlIG5vdGVkLgoyMDUyCVRoaXMgZW50cnkgaXMgYW4gb3Jk
ZXJlZCBsaXN0aW5nIG9mIG1ham9yIGNyb3BzIGFuZCBwcm9kdWN0cyBzdGFydGluZyB3aXRo
IHRoZSBtb3N0IGltcG9ydGFudC4KMjA1MwlUaGlzIGVudHJ5IGdpdmVzIHRoZSB0b3RhbCBu
dW1iZXIgb2YgYWlycG9ydHMgb3IgYWlyZmllbGRzIHJlY29nbml6YWJsZSBmcm9tIHRoZSBh
aXIuIFRoZSBydW53YXkocykgbWF5IGJlIHBhdmVkIChjb25jcmV0ZSBvciBhc3BoYWx0IHN1
cmZhY2VzKSBvciB1bnBhdmVkIChncmFzcywgZWFydGgsIHNhbmQsIG9yIGdyYXZlbCBzdXJm
YWNlcykgYW5kIG1heSBpbmNsdWRlIGNsb3NlZCBvciBhYmFuZG9uZWQgaW5zdGFsbGF0aW9u
cy4gIEFpcnBvcnRzIG9yIGFpcmZpZWxkcyB0aGF0IGFyZSBubyBsb25nZXIgcmVjb2duaXph
YmxlIChvdmVyZ3Jvd24sIG5vIGZhY2lsaXRpZXMsIGV0Yy4pIGFyZSBub3QgaW5jbHVkZWQu
IE5vdGUgdGhhdCBub3QgYWxsIGFpcnBvcnRzIGhhdmUgYWNjb21tb2RhdGlvbnMgZm9yIHJl
ZnVlbGluZywgbWFpbnRlbmFuY2UsIG9yIGFpciB0cmFmZmljIGNvbnRyb2wuCjIwNTQJVGhp
cyBlbnRyeSBnaXZlcyB0aGUgYXZlcmFnZSBhbm51YWwgbnVtYmVyIG9mIGJpcnRocyBkdXJp
bmcgYSB5ZWFyIHBlciAxLDAwMCBwZXJzb25zIGluIHRoZSBwb3B1bGF0aW9uIGF0IG1pZHll
YXI7IGFsc28ga25vd24gYXMgY3J1ZGUgYmlydGggcmF0ZS4gVGhlIGJpcnRoIHJhdGUgaXMg
dXN1YWxseSB0aGUgZG9taW5hbnQgZmFjdG9yIGluIGRldGVybWluaW5nIHRoZSByYXRlIG9m
IHBvcHVsYXRpb24gZ3Jvd3RoLiBJdCBkZXBlbmRzIG9uIGJvdGggdGhlIGxldmVsIG9mIGZl
cnRpbGl0eSBhbmQgdGhlIGFnZSBzdHJ1Y3R1cmUgb2YgdGhlIHBvcHVsYXRpb24uCjIwNTUJ
VGhpcyBlbnRyeSBsaXN0cyB0aGUgc2VydmljZSBicmFuY2hlcyBzdWJvcmRpbmF0ZSB0byBk
ZWZlbnNlIG1pbmlzdHJpZXMgb3IgdGhlIGVxdWl2YWxlbnQgKHR5cGljYWxseSBncm91bmQs
IG5hdmFsLCBhaXIsIGFuZCBtYXJpbmUgZm9yY2VzKS4KMjA1NglUaGlzIGVudHJ5IGluY2x1
ZGVzIHJldmVudWVzICwgZXhwZW5kaXR1cmVzICwgYW5kIGNhcGl0YWwgZXhwZW5kaXR1cmVz
LiBUaGVzZSBmaWd1cmVzIGFyZSBjYWxjdWxhdGVkIG9uIGFuIGV4Y2hhbmdlIHJhdGUgYmFz
aXMsIGkuZS4sIG5vdCBpbiBwdXJjaGFzaW5nIHBvd2VyIHBhcml0eSAoUFBQKSB0ZXJtcy4K
MjA1NwlUaGlzIGVudHJ5IGdpdmVzIHRoZSBuYW1lIG9mIHRoZSBzZWF0IG9mIGdvdmVybm1l
bnQsIGl0cyBnZW9ncmFwaGljIGNvb3JkaW5hdGVzICwgdGhlIHRpbWUgZGlmZmVyZW5jZSBy
ZWxhdGl2ZSB0byBDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZSAoVVRDKSBhbmQgdGhlIHRp
bWUgb2JzZXJ2ZWQgaW4gV2FzaGluZ3RvbiwgREMsIGFuZCwgaWYgYXBwbGljYWJsZSwgaW5m
b3JtYXRpb24gb24gZGF5bGlnaHQgc2F2aW5nIHRpbWUgIChEU1QpIC4gV2hlcmUgYXBwcm9w
cmlhdGUsIGEgc3BlY2lhbCBub3RlIGhhcyBiZWVuIGFkZGVkIHRvIGhpZ2hsaWdodCB0aG9z
ZSBjb3VudHJpZXMgdGhhdCBoYXZlIG11bHRpcGxlIHRpbWUgem9uZXMuCjIwNTgJVGhpcyBl
bnRyeSBwcm92aWRlcyBhIGxpc3Rpbmcgb2YgdGhlIGhpZ2hlc3QtdmFsdWVkIGltcG9ydGVk
IHByb2R1Y3RzOyBpdCBzb21ldGltZXMgaW5jbHVkZXMgdGhlIHBlcmNlbnQgb2YgdG90YWwg
ZG9sbGFyIHZhbHVlLgoyMDU5CVRoaXMgZW50cnkgaW5jbHVkZXMgYSBicmllZiBkZXNjcmlw
dGlvbiBvZiB0eXBpY2FsIHdlYXRoZXIgcmVnaW1lcyB0aHJvdWdob3V0IHRoZSB5ZWFyLgoy
MDYwCVRoaXMgZW50cnkgZ2l2ZXMgdGhlIHRvdGFsIGxlbmd0aCBvZiB0aGUgYm91bmRhcnkg
YmV0d2VlbiB0aGUgbGFuZCBhcmVhIChpbmNsdWRpbmcgaXNsYW5kcykgYW5kIHRoZSBzZWEu
CjIwNjEJVGhpcyBlbnRyeSBwcm92aWRlcyBhIHJhbmsgb3JkZXJpbmcgb2YgdHJhZGluZyBw
YXJ0bmVycyBzdGFydGluZyB3aXRoIHRoZSBtb3N0IGltcG9ydGFudDsgaXQgc29tZXRpbWVz
IGluY2x1ZGVzIHRoZSBwZXJjZW50IG9mIHRvdGFsIGRvbGxhciB2YWx1ZS4KMjA2MwlUaGlz
IGVudHJ5IHByb3ZpZGVzIGluZm9ybWF0aW9uIG9uIGEgY291bnRyeeKAmXMgY29uc3RpdHV0
aW9uLiBJdCBpbmNsdWRlcyB0aGUgZGF0ZXMgb2YgcHJldmlvdXMgY29uc3RpdHV0aW9ucywg
dGhlIGRhdGVzIG9mIHRoZSBtYWluIHN0ZXBzIGluIG1ha2luZyBhbmQgaW1wbGVtZW50aW5n
IHRoZSBsYXRlc3QgY29uc3RpdHV0aW9uLCBhbmQgdGhlIGRhdGVzIG9mIGFtZW5kbWVudHMu
IEZvciBjb3VudHJpZXMgd2l0aCAxLTMgcHJldmlvdXMgY29uc3RpdHV0aW9ucywgdGhlIHll
YXJzIGFyZSBsaXN0ZWQ7IGZvciB0aG9zZSB3aXRoIDQtOSBwcmV2aW91cywgdGhlIGVudHJ5
IGlzIGxpc3RlZCBhcyDigJxzZXZlcmFsIHByZXZpb3VzLOKAnSBhbmQgZm9yIHRob3NlIHdp
dGggMTAgb3IgbW9yZSwgdGhlIGVudHJ5IGlzIOKAnG1hbnkgcHJldmlvdXMu4oCdIEFtZW5k
bWVudCBlbnRyaWVzIGFyZSB0cmVhdGVkIGluIHRoZSBzYW1lIG1hbm5lciwgYW5kIGluY2x1
ZGUgdGhlIGRhdGUocykgb2YgdGhlIGxhc3QgYW1lbmRtZW50KHMpLiBUaGUgbWFpbiBzdGVw
cyBpbiBjcmVhdGluZyBhIGNvbnN0aXR1dGlvbiBhbmQgYW1lbmRpbmcgaXQgdXN1YWxseSBp
bmNsdWRlIGRyYWZ0aW5nLCBsZWdpc2xhdGl2ZSBhbmQvb3IgZXhlY3V0aXZlIGJyYW5jaCBy
ZXZpZXcgYW5kIGFwcHJvdmFsLCBwdWJsaWMgcmVmZXJlbmR1bSwgYW5kIGVudHJ5IGludG8g
bGF3LiBJbiBtYW55IGNvdW50cmllcyB0aGlzIHByb2Nlc3MgaXMgbGVuZ3RoeS4gVGVybXMg
Y29tbW9ubHkgdXNlZCB0byBkZXNjcmliZSBjb25zdGl0dXRpb25hbCBjaGFuZ2VzIGFyZSDi
gJxhbWVuZGVkLOKAnSDigJxyZXZpc2VkLOKAnSBvciDigJxyZWZvcm1lZC7igJ0gIEluIGNv
dW50cmllcyBzdWNoIGFzIFNvdXRoIEtvcmVhIGFuZCBUdXJrbWVuaXN0YW4sIHNvdXJjZXMg
ZGlmZmVyIGFzIHRvIHdoZXRoZXIgY2hhbmdlcyBhcmUgc3RhdGVkIGFzIG5ldyBjb25zdGl0
dXRpb25zIG9yIGFyZSBhbWVuZG1lbnRzLyByZXZpc2lvbnMgdG8gZXhpc3Rpbmcgb25lcy4g
QSBmZXcgY291bnRyaWVzIGluY2x1ZGluZyBDYW5hZGEsIElzcmFlbCwgYW5kIFVLIGhhdmUg
bm8gc2luZ2xlIGNvbnN0aXR1dGlvbiBkb2N1bWVudCwgYnV0IGhhdmUgdmFyaW91cyB3cml0
dGVuIGFuZCB1bndyaXR0ZW4gYWN0cywgc3RhdHV0ZXMsIGNvbW1vbiBsYXdzLCBhbmQgcHJh
Y3RpY2VzIHRoYXQsIHdoZW4gdGFrZW4gdG9nZXRoZXIsIGRlc2NyaWJlIGEgYm9keSBvZiBm
dW5kYW1lbnRhbCBwcmluY2lwbGVzIG9yIGVzdGFibGlzaGVkIHByZWNlZGVudHMgYXMgdG8g
aG93IHRoZWlyIGNvdW50cmllcyBhcmUgZ292ZXJuZWQuIENvdW50cmllcyBpbmNsdWRpbmcg
SG9uZyBLb25nLCBNYWNhdSwgT21hbiwgYW5kIFNhdWRpIEFyYWJpYSB1c2UgdGhlIHRlcm0g
4oCcYmFzaWMgbGF34oCdIGluc3RlYWQgb2YgY29uc3RpdHV0aW9uLiBBIG51bWJlciBvZiBz
ZWxmLWdvdmVybmluZyBkZXBlbmRlbmNpZXMgYW5kIHRlcnJpdG9yaWVzIHN1Y2ggYXMgdGhl
IENheW1hbiBJc2xhbmRzLCBCZXJtdWRhLCBhbmQgR2licmFsdGFyIChVSyksIEdyZWVubGFu
ZCBhbmQgRmFyb2UgSXNsYW5kcyAoRGVubWFyayksIEFydWJhLCBDdXJhY2FvLCBhbmQgU2lu
dCBNYWFydGVuIChOZXRoZXJsYW5kcyksIGFuZCBQdWVydG8gUmljbyBhbmQgdGhlIFZpcmdp
biBJc2xhbmRzIChVUykgaGF2ZSB0aGVpciBvd24gY291bnRyeS1sZXZlbCBjb25zdGl0dXRp
b25zLgoyMDY2CVRoaXMgZW50cnkgZ2l2ZXMgdGhlIGF2ZXJhZ2UgYW5udWFsIG51bWJlciBv
ZiBkZWF0aHMgZHVyaW5nIGEgeWVhciBwZXIgMSwwMDAgcG9wdWxhdGlvbiBhdCBtaWR5ZWFy
OyBhbHNvIGtub3duIGFzIGNydWRlIGRlYXRoIHJhdGUuIFRoZSBkZWF0aCByYXRlLCB3aGls
ZSBvbmx5IGEgcm91Z2ggaW5kaWNhdG9yIG9mIHRoZSBtb3J0YWxpdHkgc2l0dWF0aW9uIGlu
IGEgY291bnRyeSwgYWNjdXJhdGVseSBpbmRpY2F0ZXMgdGhlIGN1cnJlbnQgbW9ydGFsaXR5
IGltcGFjdCBvbiBwb3B1bGF0aW9uIGdyb3d0aC4gVGhpcyBpbmRpY2F0b3IgaXMgc2lnbmlm
aWNhbnRseSBhZmZlY3RlZCBieSBhZ2UgZGlzdHJpYnV0aW9uLCBhbmQgbW9zdCBjb3VudHJp
ZXMgd2lsbCBldmVudHVhbGx5IHNob3cgYSByaXNlIGluIHRoZSBvdmVyYWxsIGRlYXRoIHJh
dGUsIGluIHNwaXRlIG9mIGNvbnRpbnVlZCBkZWNsaW5lIGluIG1vcnRhbGl0eSBhdCBhbGwg
YWdlcywgYXMgZGVjbGluaW5nIGZlcnRpbGl0eSByZXN1bHRzIGluIGFuIGFnaW5nIHBvcHVs
YXRpb24uCjIwNjgJVGhpcyBlbnRyeSBjb250YWlucyBhbiBhbHBoYWJldGljYWwgbGlzdGlu
ZyBvZiBhbGwgbm9uaW5kZXBlbmRlbnQgZW50aXRpZXMgYXNzb2NpYXRlZCBpbiBzb21lIHdh
eSB3aXRoIGEgcGFydGljdWxhciBpbmRlcGVuZGVudCBzdGF0ZS4KMjA3MAlUaGlzIGVudHJ5
IGluY2x1ZGVzIGEgd2lkZSB2YXJpZXR5IG9mIHNpdHVhdGlvbnMgdGhhdCByYW5nZSBmcm9t
IHRyYWRpdGlvbmFsIGJpbGF0ZXJhbCBib3VuZGFyeSBkaXNwdXRlcyB0byB1bmlsYXRlcmFs
IGNsYWltcyBvZiBvbmUgc29ydCBvciBhbm90aGVyLiBJbmZvcm1hdGlvbiByZWdhcmRpbmcg
ZGlzcHV0ZXMgb3ZlciBpbnRlcm5hdGlvbmFsIHRlcnJlc3RyaWFsIGFuZCBtYXJpdGltZSBi
b3VuZGFyaWVzIGhhcyBiZWVuIHJldmlld2VkIGJ5IHRoZSBVUyBEZXBhcnRtZW50IG9mIFN0
YXRlLiBSZWZlcmVuY2VzIHRvIG90aGVyIHNpdHVhdGlvbnMgaW52b2x2aW5nIGJvcmRlcnMg
b3IgZnJvbnRpZXJzIG1heSBhbHNvIGJlIGluY2x1ZGVkLCBzdWNoIGFzIHJlc291cmNlIGRp
c3B1dGVzLCBnZW9wb2xpdGljYWwgcXVlc3Rpb25zLCBvciBpcnJlZGVudGlzdCBpc3N1ZXM7
IGhvd2V2ZXIsIGluY2x1c2lvbiBkb2VzIG5vdCBuZWNlc3NhcmlseSBjb25zdGl0dXRlIG9m
ZmljaWFsIGFjY2VwdGFuY2Ugb3IgcmVjb2duaXRpb24gYnkgdGhlIFVTIEdvdmVybm1lbnQu
CjIwNzUJVGhpcyBlbnRyeSBwcm92aWRlcyBhbiBvcmRlcmVkIGxpc3Rpbmcgb2YgZXRobmlj
IGdyb3VwcyBzdGFydGluZyB3aXRoIHRoZSBsYXJnZXN0IGFuZCBub3JtYWxseSBpbmNsdWRl
cyB0aGUgcGVyY2VudCBvZiB0b3RhbCBwb3B1bGF0aW9uLgoyMDc2CVRoaXMgZW50cnkgcHJv
dmlkZXMgdGhlIGF2ZXJhZ2UgYW5udWFsIHByaWNlIG9mIGEgY291bnRyeSdzIG1vbmV0YXJ5
IHVuaXQgZm9yIHRoZSB0aW1lIHBlcmlvZCBzcGVjaWZpZWQsIGV4cHJlc3NlZCBpbiB1bml0
cyBvZiBsb2NhbCBjdXJyZW5jeSBwZXIgVVMgZG9sbGFyLCBhcyBkZXRlcm1pbmVkIGJ5IGlu
dGVybmF0aW9uYWwgbWFya2V0IGZvcmNlcyBvciBieSBvZmZpY2lhbCBmaWF0LiBUaGUgSW50
ZXJuYXRpb25hbCBPcmdhbml6YXRpb24gZm9yIFN0YW5kYXJkaXphdGlvbiAoSVNPKSA0MjE3
IGFscGhhYmV0aWMgY3VycmVuY3kgY29kZSBmb3IgdGhlIG5hdGlvbmFsIG1lZGl1bSBvZiBl
eGNoYW5nZSBpcyBwcmVzZW50ZWQgaW4gcGFyZW50aGVzaXMuICBDbG9zaW5nIGRhaWx5IGV4
Y2hhbmdlIHJhdGVzIGFyZSBub3QgcHJlc2VudGVkIGluIFRoZSBXb3JsZCBGYWN0Ym9vayAs
IGJ1dCBhcmUgdXNlZCB0byBjb252ZXJ0IHN0b2NrIHZhbHVlcyAtIGUuZy4sIHRoZSBtYXJr
ZXQgdmFsdWUgb2YgcHVibGljbHkgdHJhZGVkIHNoYXJlcyAtIHRvIFVTIGRvbGxhcnMgYXMg
b2YgdGhlIHNwZWNpZmllZCBkYXRlLgoyMDc3CVRoaXMgZW50cnkgaW5jbHVkZXMgc2V2ZXJh
bCBzdWJmaWVsZHMuIENoaWVmIG9mIHN0YXRlIGluY2x1ZGVzIHRoZSBuYW1lIGFuZCB0aXRs
ZSBvZiB0aGUgdGl0dWxhciBsZWFkZXIgb2YgdGhlIGNvdW50cnkgd2hvIHJlcHJlc2VudHMg
dGhlIHN0YXRlIGF0IG9mZmljaWFsIGFuZCBjZXJlbW9uaWFsIGZ1bmN0aW9ucyBidXQgbWF5
IG5vdCBiZSBpbnZvbHZlZCB3aXRoIHRoZSBkYXktdG8tZGF5IGFjdGl2aXRpZXMgb2YgdGhl
IGdvdmVybm1lbnQuIEhlYWQgb2YgZ292ZXJubWVudCBpbmNsdWRlcyB0aGUgbmFtZSBhbmQg
dGl0bGUgb2YgdGhlIHRvcCBhZG1pbmlzdHJhdGl2ZSBsZWFkZXIgd2hvIGlzIGRlc2lnbmF0
ZWQgdG8gbWFuYWdlIHRoZSBkYXktdG8tZGF5IGFjdGl2aXRpZXMgb2YgdGhlIGdvdmVybm1l
bnQuIEZvciBleGFtcGxlLCBpbiB0aGUgVUssIHRoZSBtb25hcmNoIGlzIHRoZSBjaGllZiBv
ZiBzdGF0ZSwgYW5kIHRoZSBwcmltZSBtaW5pc3RlciBpcyB0aGUgaGVhZCBvZiBnb3Zlcm5t
ZW50LiBJbiB0aGUgVVMsIHRoZSBwcmVzaWRlbnQgaXMgYm90aCB0aGUgY2hpZWYgb2Ygc3Rh
dGUgYW5kIHRoZSBoZWFkIG9mIGdvdmVybm1lbnQuIENhYmluZXQgaW5jbHVkZXMgdGhlIG9m
ZmljaWFsIG5hbWUgZm9yIHRoaXMgYm9keSBvZiBoaWdoLXJhbmtpbmcgYWR2aXNlcnMgYW5k
IHRoZSBtZXRob2QgZm9yIHNlbGVjdGlvbiBvZiBtZW1iZXJzLiBFbGVjdGlvbnMgaW5jbHVk
ZXMgdGhlIG5hdHVyZSBvZiBlbGVjdGlvbiBwcm9jZXNzIG9yIGFjY2Vzc2lvbiB0byBwb3dl
ciwgZGF0ZSBvZiB0aGUgbGFzdCBlbGVjdGlvbiwgYW5kIGRhdGUgb2YgdGhlIG5leHQgZWxl
Y3Rpb24uIEVsZWN0aW9uIHJlc3VsdHMgaW5jbHVkZXMgdGhlIHBlcmNlbnQgb2Ygdm90ZSBm
b3IgZWFjaCBjYW5kaWRhdGUgaW4gdGhlIGxhc3QgZWxlY3Rpb24uCjIwNzgJVGhpcyBlbnRy
eSBwcm92aWRlcyB0aGUgdG90YWwgVVMgZG9sbGFyIGFtb3VudCBvZiBtZXJjaGFuZGlzZSBl
eHBvcnRzIG9uIGFuIGYuby5iLiAoZnJlZSBvbiBib2FyZCkgYmFzaXMuIFRoZXNlIGZpZ3Vy
ZXMgYXJlIGNhbGN1bGF0ZWQgb24gYW4gZXhjaGFuZ2UgcmF0ZSBiYXNpcywgaS5lLiwgbm90
IGluIHB1cmNoYXNpbmcgcG93ZXIgcGFyaXR5IChQUFApIHRlcm1zLgoyMDc5CVRoaXMgZW50
cnkgZ2l2ZXMgdGhlIHRvdGFsIHB1YmxpYyBhbmQgcHJpdmF0ZSBkZWJ0IG93ZWQgdG8gbm9u
cmVzaWRlbnRzIHJlcGF5YWJsZSBpbiBpbnRlcm5hdGlvbmFsbHkgYWNjZXB0ZWQgY3VycmVu
Y2llcywgZ29vZHMsIG9yIHNlcnZpY2VzLiBUaGVzZSBmaWd1cmVzIGFyZSBjYWxjdWxhdGVk
IG9uIGFuIGV4Y2hhbmdlIHJhdGUgYmFzaXMsIGkuZS4sIG5vdCBpbiBwdXJjaGFzaW5nIHBv
d2VyIHBhcml0eSAoUFBQKSB0ZXJtcy4KMjA4MAlUaGlzIGVudHJ5IGlkZW50aWZpZXMgdGhl
IGJlZ2lubmluZyBhbmQgZW5kaW5nIG1vbnRocyBmb3IgYSBjb3VudHJ5J3MgYWNjb3VudGlu
ZyBwZXJpb2Qgb2YgMTIgbW9udGhzLCB3aGljaCBvZnRlbiBpcyB0aGUgY2FsZW5kYXIgeWVh
ciBidXQgd2hpY2ggbWF5IGJlZ2luIGluIGFueSBtb250aC4gQWxsIHllYXJseSByZWZlcmVu
Y2VzIGFyZSBmb3IgdGhlIGNhbGVuZGFyIHllYXIgKENZKSB1bmxlc3MgaW5kaWNhdGVkIGFz
IGEgbm9uY2FsZW5kYXIgZmlzY2FsIHllYXIgKEZZKS4KMjA4MQlUaGlzIGVudHJ5IHByb3Zp
ZGVzIGEgd3JpdHRlbiBmbGFnIGRlc2NyaXB0aW9uIHByb2R1Y2VkIGZyb20gYWN0dWFsIGZs
YWdzIG9yIHRoZSBiZXN0IGluZm9ybWF0aW9uIGF2YWlsYWJsZSBhdCB0aGUgdGltZSB0aGUg
ZW50cnkgd2FzIHdyaXR0ZW4uIFRoZSBmbGFncyBvZiBpbmRlcGVuZGVudCBzdGF0ZXMgYXJl
IHVzZWQgYnkgdGhlaXIgZGVwZW5kZW5jaWVzIHVubGVzcyB0aGVyZSBpcyBhbiBvZmZpY2lh
bGx5IHJlY29nbml6ZWQgbG9jYWwgZmxhZy4gU29tZSBkaXNwdXRlZCBhbmQgb3RoZXIgYXJl
YXMgZG8gbm90IGhhdmUgZmxhZ3MuCjIwODUJVGhpcyBlbnRyeSBnaXZlcyB0aGUgdG90YWwg
bGVuZ3RoIG9mIHRoZSByb2FkIG5ldHdvcmsgYW5kIGluY2x1ZGVzIHRoZSBsZW5ndGggb2Yg
dGhlIHBhdmVkIGFuZCB1bnBhdmVkIHBvcnRpb25zLgoyMDg2CVRoaXMgZW50cnkgZ2l2ZXMg
aW5mb3JtYXRpb24gb24gdGhlIGZpdmUgY2F0ZWdvcmllcyBvZiBpbGxpY2l0IGRydWdzIC0g
bmFyY290aWNzLCBzdGltdWxhbnRzLCBkZXByZXNzYW50cyAoc2VkYXRpdmVzKSwgaGFsbHVj
aW5vZ2VucywgYW5kIGNhbm5hYmlzLiBUaGVzZSBjYXRlZ29yaWVzIGluY2x1ZGUgbWFueSBk
cnVncyBsZWdhbGx5IHByb2R1Y2VkIGFuZCBwcmVzY3JpYmVkIGJ5IGRvY3RvcnMgYXMgd2Vs
bCBhcyB0aG9zZSBpbGxlZ2FsbHkgcHJvZHVjZWQgYW5kIHNvbGQgb3V0c2lkZSBvZiBtZWRp
Y2FsIGNoYW5uZWxzLiBDYW5uYWJpcyAoIENhbm5hYmlzIHNhdGl2YSApIGlzIHRoZSBjb21t
b24gaGVtcCBwbGFudCwgd2hpY2ggcHJvdmlkZXMgaGFsbHVjaW5vZ2VucyB3aXRoIHNvbWUg
c2VkYXRpdmUgcHJvcGVydGllcywgYW5kIGluY2x1ZGVzIG1hcmlqdWFuYSAocG90LCBBY2Fw
dWxjbyBnb2xkLCBncmFzcywgcmVlZmVyKSwgdGV0cmFoeWRyb2Nhbm5hYmlub2wgKFRIQywg
TWFyaW5vbCksIGhhc2hpc2ggKGhhc2gpLCBhbmQgaGFzaGlzaCBvaWwgKGhhc2ggb2lsKS4g
Q29jYSAobW9zdGx5IEVyeXRocm94eWx1bSBjb2NhICkgaXMgYSBidXNoIHdpdGggbGVhdmVz
IHRoYXQgY29udGFpbiB0aGUgc3RpbXVsYW50IHVzZWQgdG8gbWFrZSBjb2NhaW5lLiBDb2Nh
IGlzIG5vdCB0byBiZSBjb25mdXNlZCB3aXRoIGNvY29hLCB3aGljaCBjb21lcyBmcm9tIGNh
Y2FvIHNlZWRzIGFuZCBpcyB1c2VkIGluIG1ha2luZyBjaG9jb2xhdGUsIGNvY29hLCBhbmQg
Y29jb2EgYnV0dGVyLiBDb2NhaW5lIGlzIGEgc3RpbXVsYW50IGRlcml2ZWQgZnJvbSB0aGUg
bGVhdmVzIG9mIHRoZSBjb2NhIGJ1c2guIERlcHJlc3NhbnRzIChzZWRhdGl2ZXMpIGFyZSBk
cnVncyB0aGF0IHJlZHVjZSB0ZW5zaW9uIGFuZCBhbnhpZXR5IGFuZCBpbmNsdWRlIGNobG9y
YWwgaHlkcmF0ZSwgYmFyYml0dXJhdGVzIChBbXl0YWwsIE5lbWJ1dGFsLCBTZWNvbmFsLCBw
aGVub2JhcmJpdGFsKSwgYmVuem9kaWF6ZXBpbmVzIChMaWJyaXVtLCBWYWxpdW0pLCBtZXRo
YXF1YWxvbmUgKFF1YWFsdWRlKSwgZ2x1dGV0aGltaWRlIChEb3JpZGVuKSwgYW5kIG90aGVy
cyAoRXF1YW5pbCwgUGxhY2lkeWwsIFZhbG1pZCkuIERydWdzIGFyZSBhbnkgY2hlbWljYWwg
c3Vic3RhbmNlcyB0aGF0IGVmZmVjdCBhIHBoeXNpY2FsLCBtZW50YWwsIGVtb3Rpb25hbCwg
b3IgYmVoYXZpb3JhbCBjaGFuZ2UgaW4gYW4gaW5kaXZpZHVhbC4gRHJ1ZyBhYnVzZSBpcyB0
aGUgdXNlIG9mIGFueSBsaWNpdCBvciBpbGxpY2l0IGNoZW1pY2FsIHN1YnN0YW5jZSB0aGF0
IHJlc3VsdHMgaW4gcGh5c2ljYWwsIG1lbnRhbCwgZW1vdGlvbmFsLCBvciBiZWhhdmlvcmFs
IGltcGFpcm1lbnQgaW4gYW4gaW5kaXZpZHVhbC4gSGFsbHVjaW5vZ2VucyBhcmUgZHJ1Z3Mg
dGhhdCBhZmZlY3Qgc2Vuc2F0aW9uLCB0aGlua2luZywgc2VsZi1hd2FyZW5lc3MsIGFuZCBl
bW90aW9uLiBIYWxsdWNpbm9nZW5zIGluY2x1ZGUgTFNEIChhY2lkLCBtaWNyb2RvdCksIG1l
c2NhbGluZSBhbmQgcGV5b3RlIChtZXhjLCBidXR0b25zLCBjYWN0dXMpLCBhbXBoZXRhbWlu
ZSB2YXJpYW50cyAoUE1BLCBTVFAsIERPQiksIHBoZW5jeWNsaWRpbmUgKFBDUCwgYW5nZWwg
ZHVzdCwgaG9nKSwgcGhlbmN5Y2xpZGluZSBhbmFsb2d1ZXMgKFBDRSwgUENQeSwgVENQKSwg
YW5kIG90aGVycyAocHNpbG9jeWJpbiwgcHNpbG9jeW4pLiBIYXNoaXNoIGlzIHRoZSByZXNp
bm91cyBleHVkYXRlIG9mIHRoZSBjYW5uYWJpcyBvciBoZW1wIHBsYW50ICggQ2FubmFiaXMg
c2F0aXZhICkuIEhlcm9pbiBpcyBhIHNlbWlzeW50aGV0aWMgZGVyaXZhdGl2ZSBvZiBtb3Jw
aGluZS4gTWFuZHJheCBpcyBhIHRyYWRlIG5hbWUgZm9yIG1ldGhhcXVhbG9uZSwgYSBwaGFy
bWFjZXV0aWNhbCBkZXByZXNzYW50LiBNYXJpanVhbmEgaXMgdGhlIGRyaWVkIGxlYWYgb2Yg
dGhlIGNhbm5hYmlzIG9yIGhlbXAgcGxhbnQgKCBDYW5uYWJpcyBzYXRpdmEgKS4gTWV0aGFx
dWFsb25lIGlzIGEgcGhhcm1hY2V1dGljYWwgZGVwcmVzc2FudCwgcmVmZXJyZWQgdG8gYXMg
bWFuZHJheCBpbiBTb3V0aHdlc3QgQXNpYSBhbmQgQWZyaWNhLiBOYXJjb3RpY3MgYXJlIGRy
dWdzIHRoYXQgcmVsaWV2ZSBwYWluLCBvZnRlbiBpbmR1Y2Ugc2xlZXAsIGFuZCByZWZlciB0
byBvcGl1bSwgb3BpdW0gZGVyaXZhdGl2ZXMsIGFuZCBzeW50aGV0aWMgc3Vic3RpdHV0ZXMu
IE5hdHVyYWwgbmFyY290aWNzIGluY2x1ZGUgb3BpdW0gKHBhcmVnb3JpYywgcGFyZXBlY3Rv
bGluKSwgbW9ycGhpbmUgKE1TLUNvbnRpbiwgUm94YW5vbCksIGNvZGVpbmUgKFR5bGVub2wg
d2l0aCBjb2RlaW5lLCBFbXBpcmluIHdpdGggY29kZWluZSwgUm9iaXR1c3NpbiBBQyksIGFu
ZCB0aGViYWluZS4gU2VtaXN5bnRoZXRpYyBuYXJjb3RpY3MgaW5jbHVkZSBoZXJvaW4gKGhv
cnNlLCBzbWFjayksIGFuZCBoeWRyb21vcnBob25lIChEaWxhdWRpZCkuIFN5bnRoZXRpYyBu
YXJjb3RpY3MgaW5jbHVkZSBtZXBlcmlkaW5lIG9yIFBldGhpZGluZSAoRGVtZXJvbCwgTWVw
ZXJnYW4pLCBtZXRoYWRvbmUgKERvbG9waGluZSwgTWV0aGFkb3NlKSwgYW5kIG90aGVycyAo
RGFydm9uLCBMb21vdGlsKS4gT3BpdW0gaXMgdGhlIGJyb3duLCBndW1teSBleHVkYXRlIG9m
IHRoZSBpbmNpc2VkLCB1bnJpcGUgc2VlZHBvZCBvZiB0aGUgb3BpdW0gcG9wcHkuIE9waXVt
IHBvcHB5ICggUGFwYXZlciBzb21uaWZlcnVtICkgaXMgdGhlIHNvdXJjZSBmb3IgdGhlIG5h
dHVyYWwgYW5kIHNlbWlzeW50aGV0aWMgbmFyY290aWNzLiBQb3BweSBzdHJhdyBpcyB0aGUg
ZW50aXJlIGN1dCBhbmQgZHJpZWQgb3BpdW0gcG9wcHktcGxhbnQgbWF0ZXJpYWwsIG90aGVy
IHRoYW4gdGhlIHNlZWRzLiAgT3BpdW0gaXMgZXh0cmFjdGVkIGZyb20gcG9wcHkgc3RyYXcg
aW4gY29tbWVyY2lhbCBvcGVyYXRpb25zIHRoYXQgcHJvZHVjZSB0aGUgZHJ1ZyBmb3IgbWVk
aWNhbCB1c2UuIFFhdCAoa2F0LCBraGF0KSBpcyBhIHN0aW11bGFudCBmcm9tIHRoZSBidWRz
IG9yIGxlYXZlcyBvZiBDYXRoYSBlZHVsaXMgdGhhdCBpcyBjaGV3ZWQgb3IgZHJ1bmsgYXMg
dGVhLiBRdWFhbHVkZXMgaXMgdGhlIE5vcnRoIEFtZXJpY2FuIHNsYW5nIHRlcm0gZm9yIG1l
dGhhcXVhbG9uZSwgYSBwaGFybWFjZXV0aWNhbCBkZXByZXNzYW50LiBTdGltdWxhbnRzIGFy
ZSBkcnVncyB0aGF0IHJlbGlldmUgbWlsZCBkZXByZXNzaW9uLCBpbmNyZWFzZSBlbmVyZ3kg
YW5kIGFjdGl2aXR5LCBhbmQgaW5jbHVkZSBjb2NhaW5lIChjb2tlLCBzbm93LCBjcmFjayks
IGFtcGhldGFtaW5lcyAoRGVzb3h5biwgRGV4ZWRyaW5lKSwgZXBoZWRyaW5lLCBlY3N0YXN5
IChjbGFyaXR5LCBlc3NlbmNlLCBkb2N0b3IsIEFkYW0pLCBwaGVubWV0cmF6aW5lIChQcmVs
dWRpbiksIG1ldGh5bHBoZW5pZGF0ZSAoUml0YWxpbiksIGFuZCBvdGhlcnMgKEN5bGVydCwg
U2Fub3JleCwgVGVudWF0ZSkuCjIwODcJVGhpcyBlbnRyeSBwcm92aWRlcyB0aGUgdG90YWwg
VVMgZG9sbGFyIGFtb3VudCBvZiBtZXJjaGFuZGlzZSBpbXBvcnRzIG9uIGEgYy5pLmYuIChj
b3N0LCBpbnN1cmFuY2UsIGFuZCBmcmVpZ2h0KSBvciBmLm8uYi4gKGZyZWUgb24gYm9hcmQp
IGJhc2lzLiBUaGVzZSBmaWd1cmVzIGFyZSBjYWxjdWxhdGVkIG9uIGFuIGV4Y2hhbmdlIHJh
dGUgYmFzaXMsIGkuZS4sIG5vdCBpbiBwdXJjaGFzaW5nIHBvd2VyIHBhcml0eSAoUFBQKSB0
ZXJtcy4KMjA4OAlGb3IgbW9zdCBjb3VudHJpZXMsIHRoaXMgZW50cnkgZ2l2ZXMgdGhlIGRh
dGUgdGhhdCBzb3ZlcmVpZ250eSB3YXMgYWNoaWV2ZWQgYW5kIGZyb20gd2hpY2ggbmF0aW9u
LCBlbXBpcmUsIG9yIHRydXN0ZWVzaGlwLiBGb3IgdGhlIG90aGVyIGNvdW50cmllcywgdGhl
IGRhdGUgZ2l2ZW4gbWF5IG5vdCByZXByZXNlbnQgImluZGVwZW5kZW5jZSIgaW4gdGhlIHN0
cmljdCBzZW5zZSwgYnV0IHJhdGhlciBzb21lIHNpZ25pZmljYW50IG5hdGlvbmhvb2QgZXZl
bnQgc3VjaCBhcyB0aGUgdHJhZGl0aW9uYWwgZm91bmRpbmcgZGF0ZSBvciB0aGUgZGF0ZSBv
ZiB1bmlmaWNhdGlvbiwgZmVkZXJhdGlvbiwgY29uZmVkZXJhdGlvbiwgZXN0YWJsaXNobWVu
dCwgZnVuZGFtZW50YWwgY2hhbmdlIGluIHRoZSBmb3JtIG9mIGdvdmVybm1lbnQsIG9yIHN0
YXRlIHN1Y2Nlc3Npb24uIEZvciBhIG51bWJlciBvZiBjb3VudHJpZXMsIHRoZSBlc3RhYmxp
c2htZW50IG9mIHN0YXRlaG9vZCB3YXMgYSBsZW5ndGh5IGV2b2x1dGlvbmFyeSBwcm9jZXNz
IG9jY3VycmluZyBvdmVyIGRlY2FkZXMgb3IgZXZlbiBjZW50dXJpZXMuIEluIHN1Y2ggY2Fz
ZXMsIHNldmVyYWwgc2lnbmlmaWNhbnQgZGF0ZXMgYXJlIGNpdGVkLiBEZXBlbmRlbnQgYXJl
YXMgaW5jbHVkZSB0aGUgbm90YXRpb24gIm5vbmUiIGZvbGxvd2VkIGJ5IHRoZSBuYXR1cmUg
b2YgdGhlaXIgZGVwZW5kZW5jeSBzdGF0dXMuIEFsc28gc2VlIHRoZSBUZXJtaW5vbG9neSBu
b3RlLgoyMDg5CVRoaXMgZW50cnkgZ2l2ZXMgdGhlIGFubnVhbCBwZXJjZW50YWdlIGluY3Jl
YXNlIGluIGluZHVzdHJpYWwgcHJvZHVjdGlvbiAoaW5jbHVkZXMgbWFudWZhY3R1cmluZywg
bWluaW5nLCBhbmQgY29uc3RydWN0aW9uKS4KMjA5MAlUaGlzIGVudHJ5IHByb3ZpZGVzIGEg
cmFuayBvcmRlcmluZyBvZiBpbmR1c3RyaWVzIHN0YXJ0aW5nIHdpdGggdGhlIGxhcmdlc3Qg
YnkgdmFsdWUgb2YgYW5udWFsIG91dHB1dC4KMjA5MQlUaGlzIGVudHJ5IGdpdmVzIHRoZSBu
dW1iZXIgb2YgZGVhdGhzIG9mIGluZmFudHMgdW5kZXIgb25lIHllYXIgb2xkIGluIGEgZ2l2
ZW4geWVhciBwZXIgMSwwMDAgbGl2ZSBiaXJ0aHMgaW4gdGhlIHNhbWUgeWVhci4gVGhpcyBy
YXRlIGlzIG9mdGVuIHVzZWQgYXMgYW4gaW5kaWNhdG9yIG9mIHRoZSBsZXZlbCBvZiBoZWFs
dGggaW4gYSBjb3VudHJ5LgoyMDkyCVRoaXMgZW50cnkgZnVybmlzaGVzIHRoZSBhbm51YWwg
cGVyY2VudCBjaGFuZ2UgaW4gY29uc3VtZXIgcHJpY2VzIGNvbXBhcmVkIHdpdGggdGhlIHBy
ZXZpb3VzIHllYXIncyBjb25zdW1lciBwcmljZXMuCjIwOTMJVGhpcyBlbnRyeSBnaXZlcyB0
aGUgdG90YWwgbGVuZ3RoIG9mIG5hdmlnYWJsZSByaXZlcnMsIGNhbmFscywgYW5kIG90aGVy
IGlubGFuZCBib2RpZXMgb2Ygd2F0ZXIuCjIwOTQJVGhpcyBlbnRyeSBpbmNsdWRlcyB0aHJl
ZSBzdWJmaWVsZHMuIFRoZSBoaWdoZXN0IGNvdXJ0KHMpIHN1YmZpZWxkIGluY2x1ZGVzIHRo
ZSBuYW1lKHMpIG9mIGEgY291bnRyeSdzIGhpZ2hlc3QgbGV2ZWwgY291cnQocyksIHRoZSBu
dW1iZXIgYW5kIHRpdGxlcyBvZiB0aGUganVkZ2VzLCBhbmQgdGhlIHR5cGVzIG9mIGNhc2Vz
IGhlYXJkIGJ5IHRoZSBjb3VydCwgd2hpY2ggY29tbW9ubHkgYXJlIGJhc2VkIG9uIGNpdmls
LCBjcmltaW5hbCwgYWRtaW5pc3RyYXRpdmUsIGFuZCBjb25zdGl0dXRpb25hbCBsYXcuIEEg
bnVtYmVyIG9mIGNvdW50cmllcyBoYXZlIHNlcGFyYXRlIGNvbnN0aXR1dGlvbmFsIGNvdXJ0
cy4gVGhlIGp1ZGdlIHNlbGVjdGlvbiBhbmQgdGVybSBvZiBvZmZpY2Ugc3ViZmllbGQgaW5j
bHVkZXMgdGhlIG9yZ2FuaXphdGlvbnMgYW5kIGFzc29jaWF0ZWQgb2ZmaWNpYWxzIHJlc3Bv
bnNpYmxlIGZvciBub21pbmF0aW5nIGFuZCBhcHBvaW50aW5nIGp1ZGdlcywgYW5kIGEgYnJp
ZWYgZGVzY3JpcHRpb24gb2YgdGhlIHByb2Nlc3MuIFRoZSBzZWxlY3Rpb24gcHJvY2VzcyBj
YW4gYmUgaW5kaWNhdGl2ZSBvZiB0aGUgaW5kZXBlbmRlbmNlIG9mIGEgY291bnRyeSdzIGNv
dXJ0IHN5c3RlbSBmcm9tIG90aGVyIGJyYW5jaGVzIG9mIGl0cyBnb3Zlcm5tZW50LiBBbHNv
IGluY2x1ZGVkIGluIHRoaXMgc3ViZmllbGQgYXJlIGp1ZGdlcycgdGVudXJlcywgd2hpY2gg
Y2FuIHJhbmdlIGZyb20gYSBmZXcgeWVhcnMsIHRvIGEgc3BlY2lmaWVkIHJldGlyZW1lbnQg
YWdlLCB0byBsaWZlbG9uZyBhcHBvaW50bWVudHMuIFRoZSBzdWJvcmRpbmF0ZSBjb3VydHMg
c3ViZmllbGQgbGlzdHMgdGhlIGNvdXJ0cyBsb3dlciBpbiB0aGUgaGllcmFyY2h5IG9mIGEg
Y291bnRyeSdzIGNvdXJ0IHN5c3RlbS4gQSBmZXcgY291bnRyaWVzIHdpdGggZmVkZXJhbC1z
dHlsZSBnb3Zlcm5tZW50cywgc3VjaCBhcyBCcmF6aWwsIENhbmFkYSwgYW5kIHRoZSBVUywg
aW4gYWRkaXRpb24gdG8gdGhlaXIgZmVkZXJhbCBjb3VydCwgaGF2ZSBzZXBhcmF0ZSBzdGF0
ZS0gb3IgcHJvdmluY2UtbGV2ZWwgY291cnQgc3lzdGVtcywgdGhvdWdoIGdlbmVyYWxseSB0
aGUgdHdvIHN5c3RlbXMgaW50ZXJhY3QuCjIwOTUJVGhpcyBlbnRyeSBjb250YWlucyB0aGUg
dG90YWwgbGFib3IgZm9yY2UgZmlndXJlLgoyMDk2CVRoaXMgZW50cnkgY29udGFpbnMgdGhl
IHRvdGFsIGxlbmd0aCBvZiBhbGwgbGFuZCBib3VuZGFyaWVzIGFuZCB0aGUgaW5kaXZpZHVh
bCBsZW5ndGhzIGZvciBlYWNoIG9mIHRoZSBjb250aWd1b3VzIGJvcmRlciBjb3VudHJpZXMg
LiBXaGVuIGF2YWlsYWJsZSwgb2ZmaWNpYWwgbGVuZ3RocyBwdWJsaXNoZWQgYnkgbmF0aW9u
YWwgc3RhdGlzdGljYWwgYWdlbmNpZXMgYXJlIHVzZWQuIEJlY2F1c2Ugc3VydmV5aW5nIG1l
dGhvZHMgbWF5IGRpZmZlciwgY291bnRyeSBib3JkZXIgbGVuZ3RocyByZXBvcnRlZCBieSBj
b250aWd1b3VzIGNvdW50cmllcyBtYXkgZGlmZmVyLgoyMDk3CVRoaXMgZW50cnkgY29udGFp
bnMgdGhlIHBlcmNlbnRhZ2Ugc2hhcmVzIG9mIHRvdGFsIGxhbmQgYXJlYSBmb3IgdGhyZWUg
ZGlmZmVyZW50IHR5cGVzIG9mIGxhbmQgdXNlOiBhcmFibGUgbGFuZCAtIGxhbmQgY3VsdGl2
YXRlZCBmb3IgY3JvcHMgbGlrZSB3aGVhdCwgbWFpemUsIGFuZCByaWNlIHRoYXQgYXJlIHJl
cGxhbnRlZCBhZnRlciBlYWNoIGhhcnZlc3Q7IHBlcm1hbmVudCBjcm9wcyAtIGxhbmQgY3Vs
dGl2YXRlZCBmb3IgY3JvcHMgbGlrZSBjaXRydXMsIGNvZmZlZSwgYW5kIHJ1YmJlciB0aGF0
IGFyZSBub3QgcmVwbGFudGVkIGFmdGVyIGVhY2ggaGFydmVzdDsgaW5jbHVkZXMgbGFuZCB1
bmRlciBmbG93ZXJpbmcgc2hydWJzLCBmcnVpdCB0cmVlcywgbnV0IHRyZWVzLCBhbmQgdmlu
ZXMsIGJ1dCBleGNsdWRlcyBsYW5kIHVuZGVyIHRyZWVzIGdyb3duIGZvciB3b29kIG9yIHRp
bWJlcjsgb3RoZXIgLSBhbnkgbGFuZCBub3QgYXJhYmxlIG9yIHVuZGVyIHBlcm1hbmVudCBj
cm9wczsgaW5jbHVkZXMgcGVybWFuZW50IG1lYWRvd3MgYW5kIHBhc3R1cmVzLCBmb3Jlc3Rz
IGFuZCB3b29kbGFuZHMsIGJ1aWx0LW9uIGFyZWFzLCByb2FkcywgYmFycmVuIGxhbmQsIGV0
Yy4KMjA5OAlUaGlzIGVudHJ5IHByb3ZpZGVzIGEgcmFuayBvcmRlcmluZyBvZiBsYW5ndWFn
ZXMgc3RhcnRpbmcgd2l0aCB0aGUgbGFyZ2VzdCBhbmQgc29tZXRpbWVzIGluY2x1ZGVzIHRo
ZSBwZXJjZW50IG9mIHRvdGFsIHBvcHVsYXRpb24gc3BlYWtpbmcgdGhhdCBsYW5ndWFnZS4K

--------------010006000308010602000001
Content-Type: text/plain; charset=UTF-8;
 name="field_list.txt"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="field_list.txt"

MjAwMQlHRFAgKHB1cmNoYXNpbmcgcG93ZXIgcGFyaXR5KQoyMDAyCVBvcHVsYXRpb24gZ3Jv
d3RoIHJhdGUKMjAwMwlHRFAgLSByZWFsIGdyb3d0aCByYXRlCjIwMDQJR0RQIC0gcGVyIGNh
cGl0YSAoUFBQKQoyMDA1CUFmZmlsaWF0aW9uCjIwMDYJRGVwZW5kZW5jeSBzdGF0dXMKMjAw
NwlEaXBsb21hdGljIHJlcHJlc2VudGF0aW9uIGZyb20gdGhlIFVTCjIwMDgJVHJhbnNwb3J0
YXRpb24gLSBub3RlCjIwMTAJQWdlIHN0cnVjdHVyZQoyMDExCUdlb2dyYXBoaWMgY29vcmRp
bmF0ZXMKMjAxMglHRFAgLSBjb21wb3NpdGlvbiwgYnkgc2VjdG9yIG9mIG9yaWdpbgoyMDE4
CVNleCByYXRpbwoyMDE5CUhlbGlwb3J0cwoyMDIwCUVsZXZhdGlvbiBleHRyZW1lcwoyMDIx
CU5hdHVyYWwgaGF6YXJkcwoyMDIyCVBlb3BsZSAtIG5vdGUKMjAyMwlBcmVhIC0gY29tcGFy
YXRpdmUKMjAyNAlNaWxpdGFyeSBzZXJ2aWNlIGFnZSBhbmQgb2JsaWdhdGlvbgoyMDI1CU1h
bnBvd2VyIGZpdCBmb3IgbWlsaXRhcnkgc2VydmljZQoyMDI2CU1hbnBvd2VyIHJlYWNoaW5n
IG1pbGl0YXJpbHkgc2lnbmlmaWNhbnQgYWdlIGFubnVhbGx5CjIwMjgJQmFja2dyb3VuZAoy
MDMwCUFpcnBvcnRzIC0gd2l0aCBwYXZlZCBydW53YXlzCjIwMzEJQWlycG9ydHMgLSB3aXRo
IHVucGF2ZWQgcnVud2F5cwoyMDMyCUVudmlyb25tZW50IC0gY3VycmVudCBpc3N1ZXMKMjAz
MwlFbnZpcm9ubWVudCAtIGludGVybmF0aW9uYWwgYWdyZWVtZW50cwoyMDM0CU1pbGl0YXJ5
IGV4cGVuZGl0dXJlcwoyMDQ2CVBvcHVsYXRpb24gYmVsb3cgcG92ZXJ0eSBsaW5lCjIwNDcJ
SG91c2Vob2xkIGluY29tZSBvciBjb25zdW1wdGlvbiBieSBwZXJjZW50YWdlIHNoYXJlCjIw
NDgJTGFib3IgZm9yY2UgLSBieSBvY2N1cGF0aW9uCjIwNDkJRXhwb3J0cyAtIGNvbW1vZGl0
aWVzCjIwNTAJRXhwb3J0cyAtIHBhcnRuZXJzCjIwNTEJQWRtaW5pc3RyYXRpdmUgZGl2aXNp
b25zCjIwNTIJQWdyaWN1bHR1cmUgLSBwcm9kdWN0cwoyMDUzCUFpcnBvcnRzCjIwNTQJQmly
dGggcmF0ZQoyMDU1CU1pbGl0YXJ5IGJyYW5jaGVzCjIwNTYJQnVkZ2V0CjIwNTcJQ2FwaXRh
bAoyMDU4CUltcG9ydHMgLSBjb21tb2RpdGllcwoyMDU5CUNsaW1hdGUKMjA2MAlDb2FzdGxp
bmUKMjA2MQlJbXBvcnRzIC0gcGFydG5lcnMKMjA2MwlDb25zdGl0dXRpb24KMjA2NglEZWF0
aCByYXRlCjIwNjgJRGVwZW5kZW50IGFyZWFzCjIwNzAJRGlzcHV0ZXMgLSBpbnRlcm5hdGlv
bmFsCjIwNzUJRXRobmljIGdyb3VwcwoyMDc2CUV4Y2hhbmdlIHJhdGVzCjIwNzcJRXhlY3V0
aXZlIGJyYW5jaAoyMDc4CUV4cG9ydHMKMjA3OQlEZWJ0IC0gZXh0ZXJuYWwKMjA4MAlGaXNj
YWwgeWVhcgoyMDgxCUZsYWcgZGVzY3JpcHRpb24KMjA4NQlSb2Fkd2F5cwoyMDg2CUlsbGlj
aXQgZHJ1Z3MKMjA4NwlJbXBvcnRzCjIwODgJSW5kZXBlbmRlbmNlCjIwODkJSW5kdXN0cmlh
bCBwcm9kdWN0aW9uIGdyb3d0aCByYXRlCjIwOTAJSW5kdXN0cmllcwoyMDkxCUluZmFudCBt
b3J0YWxpdHkgcmF0ZQoyMDkyCUluZmxhdGlvbiByYXRlIChjb25zdW1lciBwcmljZXMpCjIw
OTMJV2F0ZXJ3YXlzCjIwOTQJSnVkaWNpYWwgYnJhbmNoCjIwOTUJTGFib3IgZm9yY2UKMjA5
NglMYW5kIGJvdW5kYXJpZXMKMjA5NwlMYW5kIHVzZQoyMDk4CUxhbmd1YWdlcwoyMTAwCUxl
Z2FsIHN5c3RlbQoyMTAxCUxlZ2lzbGF0aXZlIGJyYW5jaAoyMTAyCUxpZmUgZXhwZWN0YW5j
eSBhdCBiaXJ0aAoyMTAzCUxpdGVyYWN5CjIxMDUJTWFucG93ZXIgYXZhaWxhYmxlIGZvciBt
aWxpdGFyeSBzZXJ2aWNlCjIxMDYJTWFyaXRpbWUgY2xhaW1zCjIxMDcJSW50ZXJuYXRpb25h
bCBvcmdhbml6YXRpb24gcGFydGljaXBhdGlvbgoyMTA4CU1lcmNoYW50IG1hcmluZQoyMTA5
CU5hdGlvbmFsIGhvbGlkYXkKMjExMAlOYXRpb25hbGl0eQoyMTExCU5hdHVyYWwgcmVzb3Vy
Y2VzCjIxMTIJTmV0IG1pZ3JhdGlvbiByYXRlCjIxMTMJR2VvZ3JhcGh5IC0gbm90ZQoyMTE1
CVBvbGl0aWNhbCBwcmVzc3VyZSBncm91cHMgYW5kIGxlYWRlcnMKMjExNglFY29ub215IC0g
b3ZlcnZpZXcKMjExNwlQaXBlbGluZXMKMjExOAlQb2xpdGljYWwgcGFydGllcyBhbmQgbGVh
ZGVycwoyMTE5CVBvcHVsYXRpb24KMjEyMAlQb3J0cyBhbmQgdGVybWluYWxzCjIxMjEJUmFp
bHdheXMKMjEyMglSZWxpZ2lvbnMKMjEyMwlTdWZmcmFnZQoyMTI0CVRlbGVwaG9uZSBzeXN0
ZW0KMjEyNQlUZXJyYWluCjIxMjcJVG90YWwgZmVydGlsaXR5IHJhdGUKMjEyOAlHb3Zlcm5t
ZW50IHR5cGUKMjEyOQlVbmVtcGxveW1lbnQgcmF0ZQoyMTM3CU1pbGl0YXJ5IC0gbm90ZQoy
MTM4CUNvbW11bmljYXRpb25zIC0gbm90ZQoyMTQwCUdvdmVybm1lbnQgLSBub3RlCjIxNDEJ
R3JvdXAKMjE0MglDb3VudHJ5IG5hbWUKMjE0NAlMb2NhdGlvbgoyMTQ1CU1hcCByZWZlcmVu
Y2VzCjIxNDYJSXJyaWdhdGVkIGxhbmQKMjE0NwlBcmVhCjIxNDkJRGlwbG9tYXRpYyByZXBy
ZXNlbnRhdGlvbiBpbiB0aGUgVVMKMjE1MAlUZWxlcGhvbmVzIC0gbWFpbiBsaW5lcyBpbiB1
c2UKMjE1MQlUZWxlcGhvbmVzIC0gbW9iaWxlIGNlbGx1bGFyCjIxNTMJSW50ZXJuZXQgdXNl
cnMKMjE1NAlJbnRlcm5ldCBjb3VudHJ5IGNvZGUKMjE1NQlISVYvQUlEUyAtIGFkdWx0IHBy
ZXZhbGVuY2UgcmF0ZQoyMTU2CUhJVi9BSURTIC0gcGVvcGxlIGxpdmluZyB3aXRoIEhJVi9B
SURTCjIxNTcJSElWL0FJRFMgLSBkZWF0aHMKMjE3MglEaXN0cmlidXRpb24gb2YgZmFtaWx5
IGluY29tZSAtIEdpbmkgaW5kZXgKMjE3NwlNZWRpYW4gYWdlCjIxODQJSW50ZXJuZXQgaG9z
dHMKMjE4NglQdWJsaWMgZGVidAoyMTg3CUN1cnJlbnQgYWNjb3VudCBiYWxhbmNlCjIxODgJ
UmVzZXJ2ZXMgb2YgZm9yZWlnbiBleGNoYW5nZSBhbmQgZ29sZAoyMTg5CVVuaW9uIG5hbWUK
MjE5MAlQb2xpdGljYWwgc3RydWN0dXJlCjIxOTEJTWVtYmVyIHN0YXRlcwoyMTkyCVByZWxp
bWluYXJ5IHN0YXRlbWVudAoyMTkzCU1ham9yIGluZmVjdGlvdXMgZGlzZWFzZXMKMjE5NAlS
ZWZ1Z2VlcyBhbmQgaW50ZXJuYWxseSBkaXNwbGFjZWQgcGVyc29ucwoyMTk1CUdEUCAob2Zm
aWNpYWwgZXhjaGFuZ2UgcmF0ZSkKMjE5NglUcmFmZmlja2luZyBpbiBwZXJzb25zCjIxOTgJ
U3RvY2sgb2YgZGlyZWN0IGZvcmVpZ24gaW52ZXN0bWVudCAtIGF0IGhvbWUKMjE5OQlTdG9j
ayBvZiBkaXJlY3QgZm9yZWlnbiBpbnZlc3RtZW50IC0gYWJyb2FkCjIyMDAJTWFya2V0IHZh
bHVlIG9mIHB1YmxpY2x5IHRyYWRlZCBzaGFyZXMKMjIwMQlUb3RhbCByZW5ld2FibGUgd2F0
ZXIgcmVzb3VyY2VzCjIyMDIJRnJlc2h3YXRlciB3aXRoZHJhd2FsIChkb21lc3RpYy9pbmR1
c3RyaWFsL2FncmljdWx0dXJhbCkKMjIwMwlHZW9ncmFwaGljIG92ZXJ2aWV3CjIyMDQJRWNv
bm9teSBvZiB0aGUgYXJlYSBhZG1pbmlzdGVyZWQgYnkgVHVya2lzaCBDeXByaW90cwoyMjA1
CVNjaG9vbCBsaWZlIGV4cGVjdGFuY3kgKHByaW1hcnkgdG8gdGVydGlhcnkgZWR1Y2F0aW9u
KQoyMjA2CUVkdWNhdGlvbiBleHBlbmRpdHVyZXMKMjIwNwlDZW50cmFsIGJhbmsgZGlzY291
bnQgcmF0ZQoyMjA4CUNvbW1lcmNpYWwgYmFuayBwcmltZSBsZW5kaW5nIHJhdGUKMjIxMQlT
dG9jayBvZiBkb21lc3RpYyBjcmVkaXQKMjIxMglVcmJhbml6YXRpb24KMjIxMwlCcm9hZGNh
c3QgbWVkaWEKMjIxNAlTdG9jayBvZiBuYXJyb3cgbW9uZXkKMjIxNQlTdG9jayBvZiBicm9h
ZCBtb25leQoyMjE2CURyaW5raW5nIHdhdGVyIHNvdXJjZQoyMjE3CVNhbml0YXRpb24gZmFj
aWxpdHkgYWNjZXNzCjIyMTgJTmF0aW9uYWwgYW50aGVtCjIyMTkJTWFqb3IgdXJiYW4gYXJl
YXMgLSBwb3B1bGF0aW9uCjIyMjAJSW50ZXJuYXRpb25hbCBsYXcgb3JnYW5pemF0aW9uIHBh
cnRpY2lwYXRpb24KMjIyMQlUYXhlcyBhbmQgb3RoZXIgcmV2ZW51ZXMKMjIyMglCdWRnZXQg
c3VycGx1cyAoKykgb3IgZGVmaWNpdCAoLSkKMjIyMwlNYXRlcm5hbCBtb3J0YWxpdHkgcmF0
ZQoyMjI0CUNoaWxkcmVuIHVuZGVyIHRoZSBhZ2Ugb2YgNSB5ZWFycyB1bmRlcndlaWdodAoy
MjI1CUhlYWx0aCBleHBlbmRpdHVyZXMKMjIyNglQaHlzaWNpYW5zIGRlbnNpdHkKMjIyNwlI
b3NwaXRhbCBiZWQgZGVuc2l0eQoyMjI4CU9iZXNpdHkgLSBhZHVsdCBwcmV2YWxlbmNlIHJh
dGUKMjIyOQlVbmVtcGxveW1lbnQsIHlvdXRoIGFnZXMgMTUtMjQKMjIzMAlOYXRpb25hbCBz
eW1ib2wocykKMjIzMglFbGVjdHJpY2l0eSAtIHByb2R1Y3Rpb24KMjIzMwlFbGVjdHJpY2l0
eSAtIGNvbnN1bXB0aW9uCjIyMzQJRWxlY3RyaWNpdHkgLSBleHBvcnRzCjIyMzUJRWxlY3Ry
aWNpdHkgLSBpbXBvcnRzCjIyMzYJRWxlY3RyaWNpdHkgLSBpbnN0YWxsZWQgZ2VuZXJhdGlu
ZyBjYXBhY2l0eQoyMjM3CUVsZWN0cmljaXR5IC0gZnJvbSBmb3NzaWwgZnVlbHMKMjIzOAlF
bGVjdHJpY2l0eSAtIGZyb20gaHlkcm9lbGVjdHJpYyBwbGFudHMKMjIzOQlFbGVjdHJpY2l0
eSAtIGZyb20gbnVjbGVhciBmdWVscwoyMjQwCUVsZWN0cmljaXR5IC0gZnJvbSBvdGhlciBy
ZW5ld2FibGUgc291cmNlcwoyMjQxCUNydWRlIG9pbCAtIHByb2R1Y3Rpb24KMjI0MglDcnVk
ZSBvaWwgLSBleHBvcnRzCjIyNDMJQ3J1ZGUgb2lsIC0gaW1wb3J0cwoyMjQ0CUNydWRlIG9p
bCAtIHByb3ZlZCByZXNlcnZlcwoyMjQ1CVJlZmluZWQgcGV0cm9sZXVtIHByb2R1Y3RzIC0g
cHJvZHVjdGlvbgoyMjQ2CVJlZmluZWQgcGV0cm9sZXVtIHByb2R1Y3RzIC0gY29uc3VtcHRp
b24KMjI0NwlSZWZpbmVkIHBldHJvbGV1bSBwcm9kdWN0cyAtIGV4cG9ydHMKMjI0OAlSZWZp
bmVkIHBldHJvbGV1bSBwcm9kdWN0cyAtIGltcG9ydHMKMjI0OQlOYXR1cmFsIGdhcyAtIHBy
b2R1Y3Rpb24KMjI1MAlOYXR1cmFsIGdhcyAtIGNvbnN1bXB0aW9uCjIyNTEJTmF0dXJhbCBn
YXMgLSBleHBvcnRzCjIyNTIJTmF0dXJhbCBnYXMgLSBpbXBvcnRzCjIyNTMJTmF0dXJhbCBn
YXMgLSBwcm92ZWQgcmVzZXJ2ZXMKMjI1NAlDYXJib24gZGlveGlkZSBlbWlzc2lvbnMgZnJv
bSBjb25zdW1wdGlvbiBvZiBlbmVyZ3kKMjI1NQlDaGlsZCBsYWJvciAtIGNoaWxkcmVuIGFn
ZXMgNS0xNAoyMjU2CU1vdGhlcidzIG1lYW4gYWdlIGF0IGZpcnN0IGJpcnRoCjIyNTcJRGVt
b2dyYXBoaWMgcHJvZmlsZQoyMjU4CUNvbnRyYWNlcHRpdmUgcHJldmFsZW5jZSByYXRlCjIy
NTkJR0RQIC0gY29tcG9zaXRpb24sIGJ5IGVuZCB1c2UKMjI2MAlHcm9zcyBuYXRpb25hbCBz
YXZpbmcKMjI2MQlEZXBlbmRlbmN5IHJhdGlvcwoyMjYzCVBpcGVsaW5lcwoyMjY0CVBvcnRz
IGFuZCB0ZXJtaW5hbHMKMjI2NQlNYWpvciB1cmJhbiBhcmVhcyAtIHBvcHVsYXRpb24K
--------------010006000308010602000001
Content-Type: text/x-python;
 name="scrape-fielddesc.py"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
 filename="scrape-fielddesc.py"

#!/usr/bin/python

# Tools for the World Factbook
# 
# This script scrapes the field description (in plain language) from the 
# contents of one or more files named "print_XXXX.html" in the 
# fields/ directory of the world factbook.
#
# As the fieldkey (field-ID) itself is not contained in the contents of
# the scraped file(s) the fieldkey(s) is/are taken from the name(s) supplied.
# The script implies the CIA naming convention "print_XXXX.html"
# where xxxx is a 4-digit number. 
# The field descriptions(s) and the name(s) are printed to stdout (tab-delimited).
#
# 2014-08-16 Eckhard Licher, Frankfurt.
# This script is put in the public domain.

from HTMLParser import HTMLParser

result = []
sampling = False

class MyHTMLParser(HTMLParser):
    #
    # scrape the text between the first occurance of
    # <span class="category_data">This is the field description.... </span>"
    #
    def handle_starttag(self, tag, attrs):
        global result, sampling
        if tag == "span" and not result:
            for attr in attrs:
                if attr == ("class", "category_data"):
                    sampling = True            
    def handle_endtag(self, tag):
        global sampling
        if tag == "span" and sampling:
            sampling = False
    def handle_data(self, data):
        global result, sampling
        if sampling:
            result.append(data.strip())
            

def main():
    import sys
    global result
    args = sys.argv[1:]
    if not args:
        print >> sys.stderr, "usage: %s file(s)" % sys.argv[0]
        exit(1)
    for arg in args:
        try:
            contents = open(arg, "r").read()
        except IOError:
            print >> sys.sterr, "file not found:", arg
            continue
        result = []
        # instantiate the parser and feed it some HTML
        parser = MyHTMLParser()
        parser.feed(contents)
        field_id = [c for c in arg if c.isdigit()]
        field_id = "".join(field_id)[-4:]
        print "%s\t%s" % (field_id, " ".join(result).strip())
    exit(0)

if __name__ == "__main__":
    main()

--------------010006000308010602000001
Content-Type: text/x-python;
 name="scrape-fieldlist.py"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
 filename="scrape-fieldlist.py"

#!/usr/bin/python

# Tools for the World Factbook
# 
# This script scrapes the field name (in plain language) from the 
# contents of one or more files named "print_XXXX.html" in the 
# fields/ directory of the world factbook.
#
# As the fieldkey (field-ID) itself is not contained in the contents of
# the scraped file(s) the fieldkey(s) is/are taken from the name(s) supplied.
# The script implies the CIA naming convention "print_XXXX.html"
# where xxxx is a 4-digit number. 
# The fieldkey(s) and the name(s) are printed to stdout (tab-delimited).
#
# 2014-08-16 Eckhard Licher, Frankfurt.
# This script is put in the public domain.

from HTMLParser import HTMLParser

result = []

class MyHTMLParser(HTMLParser):
    #
    # scrape the only occurance of text containing "::"
    # wherever it is located in the contents...
    #
    global result
    def handle_data(self, data):
        data = data.strip()
        if data:
            pos = data.find("::")
            if pos >= 0:
                result.append(data[pos+2:].strip())

def main():
    import sys
    global result
    args = sys.argv[1:]
    if not args:
        print >> sys.stderr, "usage: %s file(s)" % sys.argv[0]
        exit(1)
    for arg in args:
        try:
            contents = open(arg, "r").read()
        except IOError:
            print >> sys.sterr, "file not found:", arg
            continue
        result = []
        # instantiate the parser and feed it some HTML
        parser = MyHTMLParser()
        parser.feed(contents)
        field_id = [c for c in arg if c.isdigit()]
        field_id = "".join(field_id)[-4:]
        print "%s\t%s" % (field_id, " ".join(result).strip())
    exit(0)

if __name__ == "__main__":
    main()

--------------010006000308010602000001--

